#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Tinkoff
"""

import asyncio
import aiohttp
import hashlib
import random
import json

# –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Tinkoff
TERMINAL_KEY = "1749885008651"
PASSWORD = "YBla2Zf$iQYwWuSU"

def generate_token(data, password):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Tinkoff API"""
    token_data = data.copy()
    token_data["Password"] = password
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_params = sorted(token_data.items(), key=lambda x: x[0])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
    concatenated = ''.join(str(value) for key, value in sorted_params)
    
    # –°–æ–∑–¥–∞–µ–º SHA256 —Ö–µ—à
    token = hashlib.sha256(concatenated.encode('utf-8')).hexdigest()
    
    print(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {concatenated}")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
    
    return token

async def test_real_payment():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    print("=== –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Tinkoff ===\n")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ (1 —Ä—É–±–ª—å)
    amount = 100  # 1 —Ä—É–±–ª—å –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    order_id = f"real_test_{random.randint(100000, 999999)}"
    description = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ 1 —Ä—É–±–ª—å"
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    token_data = {
        "TerminalKey": TERMINAL_KEY,
        "Amount": amount,
        "OrderId": order_id,
        "Description": description
    }
    
    print(f"Terminal Key: {TERMINAL_KEY}")
    print(f"Password: {PASSWORD}")
    print(f"Order ID: {order_id}")
    print(f"Amount: {amount} –∫–æ–ø–µ–µ–∫ ({amount/100} —Ä—É–±–ª–µ–π)")
    print(f"Description: {description}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = generate_token(token_data, PASSWORD)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    request_data = {
        "TerminalKey": TERMINAL_KEY,
        "Amount": amount,
        "OrderId": order_id,
        "Description": description,
        "Token": token
    }
    
    print(f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Tinkoff
    async with aiohttp.ClientSession() as session:
        response = await session.post(
            "https://securepay.tinkoff.ru/v2/Init",
            json=request_data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
        
        data = await response.json()
        print(f"\n–û—Ç–≤–µ—Ç –æ—Ç Tinkoff:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        if data.get('Success', False):
            print("\n‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {data.get('PaymentURL')}")
            print(f"üìã PaymentId: {data.get('PaymentId')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PaymentId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            payment_id = data.get('PaymentId')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            print(f"\n=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ===")
            await check_payment_status(payment_id)
            
            return payment_id
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {data.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            print(f"–î–µ—Ç–∞–ª–∏: {data.get('Details', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            return None

async def check_payment_status(payment_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    if not payment_id:
        return
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
    token_data = {
        "TerminalKey": TERMINAL_KEY,
        "PaymentId": payment_id
    }
    token = generate_token(token_data, PASSWORD)
    
    async with aiohttp.ClientSession() as session:
        response = await session.post(
            "https://securepay.tinkoff.ru/v2/GetState",
            json={
                "TerminalKey": TERMINAL_KEY,
                "PaymentId": payment_id,
                "Token": token
            },
            headers={"Content-Type": "application/json"}
        )
        
        data = await response.json()
        print(f"\n–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        if data.get('Success', False):
            status = data.get('Status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {data.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

if __name__ == "__main__":
    asyncio.run(test_real_payment()) 