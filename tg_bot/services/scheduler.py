import asyncio
import logging
from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker
from tg_bot.models.DBSM import engine, User, Shop
from tg_bot.handlers.pnl import generate_pnl_excel_report
from tg_bot.services.wb_api import fetch_report_detail_by_period
from aiogram import Bot
import os

logger = logging.getLogger(__name__)

class ReportScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.session = sessionmaker(bind=engine)
        
    async def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 12:00"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é
            today = datetime.now()
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—à–ª—É—é —Å—Ä–µ–¥—É
            days_since_wednesday = (today.weekday() - 2) % 7
            if days_since_wednesday == 0:
                days_since_wednesday = 7
            last_wednesday = today - timedelta(days=days_since_wednesday)
            week_start = last_wednesday - timedelta(days=6)  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            week_end = last_wednesday  # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            
            await self._send_reports_to_users(week_start, week_end, "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    async def send_monthly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥–æ–µ 3 —á–∏—Å–ª–æ –≤ 12:00"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü
            today = datetime.now()
            if today.day >= 3:
                # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 3 —á–∏—Å–ª–æ –∏–ª–∏ –ø–æ–∑–∂–µ, –±–µ—Ä–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
                if today.month == 1:
                    last_month = today.replace(year=today.year-1, month=12)
                else:
                    last_month = today.replace(month=today.month-1)
            else:
                # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1-2 —á–∏—Å–ª–æ, –±–µ—Ä–µ–º –º–µ—Å—è—Ü –¥–æ –ø—Ä–æ—à–ª–æ–≥–æ
                if today.month <= 2:
                    if today.month == 1:
                        last_month = today.replace(year=today.year-1, month=11)
                    else:
                        last_month = today.replace(year=today.year-1, month=12)
                else:
                    last_month = today.replace(month=today.month-2)
            
            month_start = last_month.replace(day=1)
            # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –º–∏–Ω—É—Å 1 –¥–µ–Ω—å
            if last_month.month == 12:
                next_month = last_month.replace(year=last_month.year+1, month=1)
            else:
                next_month = last_month.replace(month=last_month.month+1)
            month_end = next_month.replace(day=1) - timedelta(days=1)
            
            await self._send_reports_to_users(month_start, month_end, "–µ–∂–µ–º–µ—Å—è—á–Ω—ã–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    async def _send_reports_to_users(self, start_date: datetime, end_date: datetime, report_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏"""
        session = self.session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
            users = session.query(User).filter(User.daily_reports_enabled == True).all()
            
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    shop = session.query(Shop).filter(Shop.user_id == user.id).first()
                    if not shop:
                        logger.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
                    loop = asyncio.get_event_loop()
                    full_data = await loop.run_in_executor(
                        None,
                        fetch_report_detail_by_period,
                        shop.api_token,
                        start_date,
                        end_date
                    )
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    wb = await generate_pnl_excel_report(
                        shop.id,
                        shop.api_token,
                        start_date,
                        end_date,
                        shop.name,
                        full_data
                    )
                    
                    if wb:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        filename = f"pnl_{report_type}_{shop.id}_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"
                        wb.save(filename)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        with open(filename, 'rb') as file:
                            await self.bot.send_document(
                                chat_id=user.telegram_id,
                                document=file,
                                caption=f"üìä {report_type.capitalize()} –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
                            )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.remove(filename)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω {report_type} –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å {report_type} –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {report_type} –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        finally:
            session.close()
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤")
        
        # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        TEST_MODE = True  # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ False –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
        
        while True:
            try:
                now = datetime.now()
                
                if False:
                    # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    print("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ—à—ë–ª", now.minute)
                    if now.minute % 5 == 0:  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ –ø–µ—Ä–≤—ã–µ 10 —Å–µ–∫—É–Ω–¥
                        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                        await self.send_weekly_report()
                        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                        await self.send_monthly_report()
                else:
                    # –ù–û–†–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (—Å—Ä–µ–¥–∞ –≤ 12:00)
                    if now.weekday() == 2 and now.hour == 12 and now.minute == 0:
                        await self.send_weekly_report()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (3 —á–∏—Å–ª–æ –≤ 12:00)
                    if now.day == 3 and now.hour == 12 and now.minute == 0:
                        await self.send_monthly_report()
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60) 