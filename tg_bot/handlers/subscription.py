# subscription.py
import logging
import os
import hashlib
import random
import aiohttp
from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from tg_bot.models import sessionmaker, engine, User, Payment
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean
from sqlalchemy.orm import relationship
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
# tg_bot/middlewares/activity_middleware.py

from aiogram.dispatcher.middlewares import BaseMiddleware
from tg_bot.models import sessionmaker, engine, User

class ActivityMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        session = sessionmaker(bind=engine)()
        try:
            user_id = message.from_user.id
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                print("ActivityMiddleware: on_pre_process_message")
                user.last_active = datetime.utcnow()
                session.commit()
        except Exception as e:
            print(f"[ActivityMiddleware] Error updating last_active: {e}")
        finally:
            session.close()

    async def on_pre_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        session = sessionmaker(bind=engine)()
        try:
            user_id = callback_query.from_user.id
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                print("ActivityMiddleware: on_pre_process_callback_query")
                user.last_active = datetime.utcnow()
                session.commit()
        except Exception as e:
            print(f"[ActivityMiddleware] Error updating last_active: {e}")
        finally:
            session.close()



logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff Kassa
TINKOFF_API_URL = "https://securepay.tinkoff.ru/v2"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tinkoff
def get_tinkoff_config():
    from dataclasses import dataclass
    
    @dataclass
    class TinkoffConfig:
        terminal_key: str
        password: str
    
    # –î–∞–Ω–Ω—ã–µ Tinkoff API (–≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–¥)
    return TinkoffConfig(
        terminal_key="1749885008651",
        password="YBla2Zf$iQYwWuSU"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    )

# –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π Tinkoff
STATUS_DESCRIPTION = {
    'NEW': '–°–æ–∑–¥–∞–Ω',
    'FORM_SHOWED': '–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∞',
    'DEADLINE_EXPIRED': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω',
    'CANCELED': '–û—Ç–º–µ–Ω–µ–Ω',
    'PREAUTHORIZING': '–ü—Ä–æ–≤–µ—Ä–∫–∞',
    'AUTHORIZING': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
    'AUTHORIZED': '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
    'REJECTED': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
    'CONFIRMED': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'REFUNDED': '–í–æ–∑–≤—Ä–∞—â–µ–Ω'
}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Tinkoff API
def generate_token(data, password):
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    token_data = data.copy()
    token_data["Password"] = password
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_params = sorted(token_data.items(), key=lambda x: x[0])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
    concatenated = ''.join(str(value) for key, value in sorted_params)
    
    # –°–æ–∑–¥–∞–µ–º SHA256 —Ö–µ—à
    token = hashlib.sha256(concatenated.encode('utf-8')).hexdigest()
    
    logger.info(f"Token generation - concatenated string: {concatenated}")
    logger.info(f"Token generation - final token: {token}")
    
    return token


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user):
    if not user:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if user.subscription_end and user.subscription_end > datetime.now():
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –ÆKassa (Telegram Payments)
    session = sessionmaker(bind=engine)()
    try:
        from tg_bot.models import Payment
        current_time = datetime.utcnow()
        
        # –ò—â–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        active_payment = session.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.payment_method == 'telegram',
            Payment.status == 'SUCCESS',
            Payment.paid_at >= (current_time - timedelta(days=30))
        ).first()
        
        if active_payment:
            return True
            
    except Exception as e:
        print(f"Error checking –ÆKassa payments: {e}")
    finally:
        session.close()
    
    return False


async def subscription_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        if check_subscription(user):
            text = (
                f"üåü <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                f"‚úÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}\n"
                f"üíé –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        else:
            text = (
                "üîí <b>–ü–æ–¥–ø–∏—Å–∫–∞ ProfitBee Premium</b>\n\n"
                "üí° –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞:\n"
                "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±./–º–µ—Å—è—Ü\n"
                "üõí –ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
            )
            keyboard = InlineKeyboardMarkup(row_width=1)
            if not user.is_trial_used:
                keyboard.add(InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial"))
            keyboard.add(
                InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            )

        await callback.message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Subscription error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()


async def activate_trial_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        if user.is_trial_used:
            await callback.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return


        user.subscription_start = datetime.now()
        user.subscription_end = datetime.now() + timedelta(days=3)
        user.is_trial_used = True
        session.commit()

        text = (
            "üéâ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Trial activation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)
    finally:
        session.close()


async def buy_subscription_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        text = (
            'üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n'
            '‚Ä¢ Telegram Payments (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n'
            '‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å–∞\n\n'
            'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü'
        )
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí≥ Telegram Payments", callback_data="telegram_payment_menu"),
            InlineKeyboardButton("üè¶ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å–∞", callback_data="tinkoff_payment_menu"),
            InlineKeyboardButton("üéÅ –î–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∞", callback_data="activate_demo_subscription"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Payment creation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    finally:
        session.close()


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∏
async def activate_demo_subscription_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
        if user.subscription_end and user.subscription_end > datetime.now():
            user.subscription_end += timedelta(days=30)
        else:
            user.subscription_end = datetime.now() + timedelta(days=30)
        
        session.commit()

        text = (
            "üéâ <b>–î–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
            "üõ†Ô∏è –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Demo subscription activation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
    finally:
        session.close()


async def check_payment_callback(callback: types.CallbackQuery):
    payment_id = int(callback.data.split(':')[1])
    session = sessionmaker(bind=engine)()
    try:
        payment = session.query(Payment).get(payment_id)
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
        if payment.payment_method == 'telegram':
            # –î–ª—è –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa (Telegram Payments)
            await check_yukassa_payment(callback, payment, session)
        else:
            # –î–ª—è –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
            await check_tinkoff_payment(callback, payment, session)

    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    finally:
        session.close()

async def check_yukassa_payment(callback: types.CallbackQuery, payment: Payment, session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa (Telegram Payments)"""
    try:
        # –î–ª—è Telegram Payments —Å—Ç–∞—Ç—É—Å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SUCCESS
        if payment.status == 'SUCCESS':
            user = session.query(User).filter(User.id == payment.user_id).first()
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user.subscription_end and user.subscription_end > datetime.now():
                    user.subscription_end += timedelta(days=30)
                else:
                    user.subscription_end = datetime.now() + timedelta(days=30)
                session.commit()

                text = (
                    "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
                    f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
                await callback.message.edit_text(text, reply_markup=keyboard)
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        else:
            await callback.answer(f"‚åõ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}", show_alert=True)
    except Exception as e:
        logger.error(f"–ÆKassa payment check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa", show_alert=True)

async def check_tinkoff_payment(callback: types.CallbackQuery, payment: Payment, session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Tinkoff
        tinkoff_config = get_tinkoff_config()
        if not tinkoff_config.terminal_key or not tinkoff_config.password:
            await callback.answer("‚ùå Tinkoff API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Tinkoff
        token_data = {
            "TerminalKey": tinkoff_config.terminal_key,
            "PaymentId": payment.payment_id
        }
        token = generate_token(token_data, tinkoff_config.password)

        async with aiohttp.ClientSession() as http_session:
            response = await http_session.post(
                f"{TINKOFF_API_URL}/GetState",
                json={
                    "TerminalKey": tinkoff_config.terminal_key,
                    "PaymentId": payment.payment_id,
                    "Token": token
                },
                headers={"Content-Type": "application/json"}
            )
            data = await response.json()

        if not data.get('Success', False):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return

        new_status = data['Status']
        payment.status = new_status
        session.commit()

        if new_status == 'CONFIRMED':
            user = session.query(User).filter(User.id == payment.user_id).first()
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.subscription_end and user.subscription_end > datetime.now():
                user.subscription_end += timedelta(days=30)
            else:
                user.subscription_end = datetime.now() + timedelta(days=30)
            session.commit()

            text = (
                "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            status_text = STATUS_DESCRIPTION.get(new_status, new_status)
            await callback.answer(f"‚åõ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_text}", show_alert=True)
    except Exception as e:
        logger.error(f"Tinkoff payment check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", show_alert=True)



async def donate_project_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º ‚Äî –°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è\n\n"
        "+7 123 456 78 90 - –°–±–µ—Ä–±–∞–Ω–∫ (–°–ë–ü)"
    )



# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è DonatePay (–±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
async def tinkoff_payment_menu_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üí≥ 1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="tinkoff_pay_month"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_subscription")
    )
    
    await callback.message.edit_text(
        "üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å—É</b>\n\n"
        "–¢–∞—Ä–∏—Ñ: 299‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å—É",
        reply_markup=keyboard
    )

async def tinkoff_pay_month_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –º–µ—Å—è—Ü —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    await callback.answer("üè¶ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å—É - 299‚ÇΩ/–º–µ—Å—è—Ü", show_alert=True)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API

async def donate_project_donatepay_callback(callback: types.CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å DonatePay"""
    await callback.message.answer(
        "üíù <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!\n\n"
        "üîó <a href='https://donatepay.ru/don/–≤–∞—à_–ª–æ–≥–∏–Ω'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–Ω–∞—Ç—É</a>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞:\n"
        "üí≥ –°–ë–ü: +7XXXXXXXXXX\n"
        "üí≥ –ö–∞—Ä—Ç–∞: 2202 XXXX XXXX XXXX",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


def register_subscription_handlers(dp):
    dp.register_callback_query_handler(subscription_callback, text="subscription")
    dp.register_callback_query_handler(subscription_callback, text="subscription", state="*")
    dp.register_callback_query_handler(activate_trial_callback, text="activate_trial")
    dp.register_callback_query_handler(activate_trial_callback, text="activate_trial", state="*")
    dp.register_callback_query_handler(buy_subscription_callback, text="buy_subscription")
    dp.register_callback_query_handler(buy_subscription_callback, text="buy_subscription", state="*")
    dp.register_callback_query_handler(tinkoff_payment_menu_callback, text="tinkoff_payment_menu")
    dp.register_callback_query_handler(tinkoff_payment_menu_callback, text="tinkoff_payment_menu", state="*")
    dp.register_callback_query_handler(tinkoff_pay_month_callback, text="tinkoff_pay_month")
    dp.register_callback_query_handler(tinkoff_pay_month_callback, text="tinkoff_pay_month", state="*")
    dp.register_callback_query_handler(activate_demo_subscription_callback, text="activate_demo_subscription")
    dp.register_callback_query_handler(activate_demo_subscription_callback, text="activate_demo_subscription", state="*")
    dp.register_callback_query_handler(check_payment_callback, text="check_payment")
    dp.register_callback_query_handler(check_payment_callback, text="check_payment", state="*")
    dp.register_callback_query_handler(check_payment_callback, lambda c: c.data.startswith('check_payment:'))
    dp.register_callback_query_handler(donate_project_callback, text="donate_project")