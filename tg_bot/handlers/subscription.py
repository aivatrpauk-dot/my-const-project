# subscription.py
import logging
import os
import hashlib
import random
import aiohttp
from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from tg_bot.models import sessionmaker, engine, User, Payment
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean
from sqlalchemy.orm import relationship
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
# tg_bot/middlewares/activity_middleware.py

from aiogram.dispatcher.middlewares import BaseMiddleware
from tg_bot.models import sessionmaker, engine, User

class ActivityMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        session = sessionmaker(bind=engine)()
        try:
            user_id = message.from_user.id
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                print("ActivityMiddleware: on_pre_process_message")
                user.last_active = datetime.utcnow()
                session.commit()
        except Exception as e:
            print(f"[ActivityMiddleware] Error updating last_active: {e}")
        finally:
            session.close()

    async def on_pre_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        session = sessionmaker(bind=engine)()
        try:
            user_id = callback_query.from_user.id
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                print("ActivityMiddleware: on_pre_process_callback_query")
                user.last_active = datetime.utcnow()
                session.commit()
        except Exception as e:
            print(f"[ActivityMiddleware] Error updating last_active: {e}")
        finally:
            session.close()



logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff Kassa (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ .env)
TINKOFF_TERMINAL_KEY = os.getenv("TINKOFF_TERMINAL_KEY")
TINKOFF_PASSWORD = os.getenv("TINKOFF_PASSWORD")
TINKOFF_API_URL = "https://securepay.tinkoff.ru/v2"

# –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π Tinkoff
STATUS_DESCRIPTION = {
    'NEW': '–°–æ–∑–¥–∞–Ω',
    'FORM_SHOWED': '–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∞',
    'DEADLINE_EXPIRED': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω',
    'CANCELED': '–û—Ç–º–µ–Ω–µ–Ω',
    'PREAUTHORIZING': '–ü—Ä–æ–≤–µ—Ä–∫–∞',
    'AUTHORIZING': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
    'AUTHORIZED': '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
    'REJECTED': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
    'CONFIRMED': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'REFUNDED': '–í–æ–∑–≤—Ä–∞—â–µ–Ω'
}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Tinkoff API
def generate_token(data, password):
    params = []
    for key, value in data.items():
        if not isinstance(value, (dict, list)):
            params.append({key: value})
    params.append({"Password": password})
    sorted_params = sorted(params, key=lambda x: list(x.keys())[0])
    concatenated = ''.join(str(list(param.values())[0]) for param in sorted_params)
    return hashlib.sha256(concatenated.encode('utf-8')).hexdigest()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user):
    if not user:
        return False
    return user.subscription_end and user.subscription_end > datetime.now()


async def subscription_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        if check_subscription(user):
            text = (
                f"üåü <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                f"‚úÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}\n"
                f"üíé –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        else:
            text = (
                "üîí <b>–ü–æ–¥–ø–∏—Å–∫–∞ ProfitBee Premium</b>\n\n"
                "üí° –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞:\n"
                "‚Ä¢ –†–∞—Å—á—ë—Ç P&L –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                "‚Ä¢ –°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n\n"
                "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 990 —Ä—É–±./–º–µ—Å—è—Ü\n"
                "üõí –ü–µ—Ä–≤—ã–µ 14 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
            )
            keyboard = InlineKeyboardMarkup(row_width=1)
            if not user.is_trial_used:
                keyboard.add(InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial"))
            keyboard.add(
                InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            )

        await callback.message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Subscription error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()


async def activate_trial_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        if user.is_trial_used:
            await callback.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return


        user.subscription_start = datetime.now()
        user.subscription_end = datetime.now() + timedelta(days=140000)
        user.is_trial_used = True
        session.commit()

        text = (
            "üéâ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Trial activation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)
    finally:
        session.close()


async def buy_subscription_callback(callback: types.CallbackQuery):
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Tinkoff
        amount = 99000  # 499 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        order_id = str(random.randint(100000, 1000000000))
        description = "–ü–æ–¥–ø–∏—Å–∫–∞ JustProfit Premium –Ω–∞ 1 –º–µ—Å—è—Ü"

        token_data = {
            "TerminalKey": TINKOFF_TERMINAL_KEY,
            "Amount": amount,
            "OrderId": order_id,
            "Description": description
        }
        token = generate_token(token_data, TINKOFF_PASSWORD)

        async with aiohttp.ClientSession() as http_session:
            response = await http_session.post(
                f"{TINKOFF_API_URL}/Init",
                json={
                    "TerminalKey": TINKOFF_TERMINAL_KEY,
                    "Amount": amount,
                    "OrderId": order_id,
                    "Description": description,
                    "Token": token
                },
                headers={"Content-Type": "application/json"}
            )
            data = await response.json()

        if not data.get('Success', False):
            error = data.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment = Payment(
            account_id=user.id,
            amount=amount,
            payment_id=data['PaymentId'],
            status=data['Status']
        )
        session.add(payment)
        session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", url=data['PaymentURL']),
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{payment.id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")
        )

        text = (
            'üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n'
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω".\n'
            '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.\n\n'
            'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 499 —Ä—É–±./–º–µ—Å—è—Ü'
        )
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Payment creation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    finally:
        session.close()


async def check_payment_callback(callback: types.CallbackQuery):
    payment_id = int(callback.data.split(':')[1])
    session = sessionmaker(bind=engine)()
    try:
        payment = session.query(Payment).get(payment_id)
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Tinkoff
        token_data = {
            "TerminalKey": TINKOFF_TERMINAL_KEY,
            "PaymentId": payment.payment_id
        }
        token = generate_token(token_data, TINKOFF_PASSWORD)

        async with aiohttp.ClientSession() as http_session:
            response = await http_session.post(
                f"{TINKOFF_API_URL}/GetState",
                json={
                    "TerminalKey": TINKOFF_TERMINAL_KEY,
                    "PaymentId": payment.payment_id,
                    "Token": token
                },
                headers={"Content-Type": "application/json"}
            )
            data = await response.json()

        if not data.get('Success', False):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return

        new_status = data['Status']
        payment.status = new_status
        session.commit()

        if new_status == 'CONFIRMED':
            user = session.query(User).filter(User.id == payment.account_id).first()
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.subscription_end and user.subscription_end > datetime.now():
                user.subscription_end += timedelta(days=30)
            else:
                user.subscription_end = datetime.now() + timedelta(days=30)
            session.commit()

            text = (
                "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end.strftime('%d.%m.%Y')}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="main_menu"))
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            status_text = STATUS_DESCRIPTION.get(new_status, new_status)
            await callback.answer(f"‚åõ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_text}", show_alert=True)

    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    finally:
        session.close()

#–î–æ–Ω–∞—Ç—ã
class DonateStates(StatesGroup):
    waiting_for_amount = State()

async def donate_project_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º ‚Äî –°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è",
        parse_mode="Markdown"
    )
    await DonateStates.waiting_for_amount.set()

async def process_donation_amount(message: types.Message, state: FSMContext):
    session = sessionmaker(bind=engine)()
    try:
        amount_text = message.text.strip()
        if not amount_text.isdigit() or int(amount_text) < 1:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –∏ –≤—ã—à–µ).")
            return

        amount = int(amount_text) * 100  # –∫–æ–ø–µ–π–∫–∏
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.finish()
            return

        order_id = str(random.randint(100000, 1000000000))
        description = f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç {user.telegram_id}"

        token_data = {
            "TerminalKey": TINKOFF_TERMINAL_KEY,
            "Amount": amount,
            "OrderId": order_id,
            "Description": description
        }
        token = generate_token(token_data, TINKOFF_PASSWORD)

        async with aiohttp.ClientSession() as http_session:
            response = await http_session.post(
                f"{TINKOFF_API_URL}/Init",
                json={
                    "TerminalKey": TINKOFF_TERMINAL_KEY,
                    "Amount": amount,
                    "OrderId": order_id,
                    "Description": description,
                    "Token": token
                },
                headers={"Content-Type": "application/json"}
            )
            data = await response.json()

        if not data.get('Success', False):
            error = data.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            await state.finish()
            return

        payment = Payment(
            account_id=user.id,
            amount=amount,
            payment_id=data['PaymentId'],
            status=data['Status']
        )
        session.add(payment)
        session.commit()

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", url=data['PaymentURL']),
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{payment.id}"),
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        )

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É {int(amount/100)} —Ä—É–±.",
            reply_markup=keyboard
        )
        await state.finish()

    except Exception as e:
        logger.error(f"Donation payment creation error: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()
    finally:
        session.close()


def register_subscription_handlers(dp):
    dp.register_callback_query_handler(subscription_callback, text="subscription")
    dp.register_callback_query_handler(subscription_callback, text="subscription", state="*")
    dp.register_callback_query_handler(activate_trial_callback, text="activate_trial")
    dp.register_callback_query_handler(activate_trial_callback, text="activate_trial", state="*")
    dp.register_callback_query_handler(buy_subscription_callback, text="buy_subscription")
    dp.register_callback_query_handler(buy_subscription_callback, text="buy_subscription", state="*")
    dp.register_callback_query_handler(check_payment_callback, text="check_payment")
    dp.register_callback_query_handler(check_payment_callback, text="check_payment", state="*")
    dp.register_callback_query_handler(check_payment_callback, lambda c: c.data.startswith('check_payment:'))
    dp.register_callback_query_handler(donate_project_callback, text="donate_project")
    dp.register_message_handler(process_donation_amount, state=DonateStates.waiting_for_amount)