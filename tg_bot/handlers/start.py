from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, InputMediaPhoto
from aiogram.dispatcher import FSMContext
from tg_bot.keyboards.main_menu import main_menu_keyboard, menu_keyboard
from datetime import datetime

from tg_bot.models import User, Shop, engine, sessionmaker

async def start_command(message: types.Message, state: FSMContext):
    # await state.finish()
    
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JustProfit!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ Wildberries:\n"
        "‚úÖ –†–∞—Å—á–µ—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ ROI\n"
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ \"–ê —á—Ç–æ –µ—Å–ª–∏?\"\n\n"
        
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω WB —á–µ—Ä–µ–∑ API-—Ç–æ–∫–µ–Ω\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∏–∑–Ω–µ—Å–∞\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n\n"
        
        "<i>–ü–µ—Ä–≤—ã–µ 14 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</i>\n\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_shop"))
    async with state.proxy() as data:
        print(data)
        Session = sessionmaker()
        session = Session(bind=engine)
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.last_active = datetime.utcnow()  # ‚Üê –î–û–ë–ê–í–ò–¢–¨
            session.commit()  # ‚Üê –î–û–ë–ê–í–ò–¢–¨
        if user:
            shop = session.query(Shop).filter(Shop.user_id==user.id).first()
        else:
            shop = None
        if shop:
            
            async with state.proxy() as data:
                data['shop'] = {
                    'id': shop.id,
                    'name': shop.name,
                    'api_token': shop.api_token
                }
            text = f"<b>–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>\n–ú–∞–≥–∞–∑–∏–Ω: {shop.name}"
            text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=main_menu_keyboard())
            
        else:
            user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
            if user:
                shops = session.query(Shop).filter(Shop.user_id == user.id).all()
                if user and shops:
                    text = f"<b>–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>\n–ú–∞–≥–∞–∑–∏–Ω: –ù–µ –≤—ã–±—Ä–∞–Ω"
                    text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    await message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=main_menu_keyboard())
                else:
                    text = welcome_text
                    await message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=keyboard)
            else:
                text = welcome_text
                await message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=keyboard)
        session.close()
            

async def start_query(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    # await state.finish()
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JustProfit!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ Wildberries:\n"
        "‚úÖ –†–∞—Å—á–µ—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ ROI\n"
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ \"–ê —á—Ç–æ –µ—Å–ª–∏?\"\n\n"
        
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω WB —á–µ—Ä–µ–∑ API-—Ç–æ–∫–µ–Ω\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∏–∑–Ω–µ—Å–∞\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n\n"
        
        "<i>–ü–µ—Ä–≤—ã–µ 14 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</i>\n\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_shop"))
    
    async with state.proxy() as data:
        if 'shop' in data:
            Session = sessionmaker()
            session = Session(bind=engine)
            shop = session.query(Shop).filter(Shop.id == data['shop']['id']).first()
            text = f"<b>–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>\n–ú–∞–≥–∞–∑–∏–Ω: {shop.name if shop.name else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await call.message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=main_menu_keyboard())
        else:
            Session = sessionmaker()
            session = Session(bind=engine)
            user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
            if user:
                shops = session.query(Shop).filter(Shop.user_id == user.id).all()
                if user and shops:
                    text = f"<b>–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>\n–ú–∞–≥–∞–∑–∏–Ω: –ù–µ –≤—ã–±—Ä–∞–Ω"
                    text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    await call.message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=main_menu_keyboard())
                else:
                    text = welcome_text
                    await call.message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=keyboard)
            else:
                text = welcome_text
                await call.message.answer_photo(photo=open("—Ñ–æ—Ç–æ1.jpeg", "rb"), caption=text, reply_markup=keyboard)
            session.close()


async def main_menu(call: types.CallbackQuery, state: FSMContext):
    text = ("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    Session = sessionmaker()
    session = Session(bind=engine)
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    shop = session.query(Shop).filter(Shop.user_id==user.id).first()
    if shop:
        
        async with state.proxy() as data:
            data['shop'] = {
                'id': shop.id,
                'name': shop.name,
                'api_token': shop.api_token
            }
    session.close()
    text = " <b>–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å—É.\n\n‚ñ´Ô∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å\n‚ñ´Ô∏è ROS ‚Äî –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂, –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ –í—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å –æ–¥–Ω–æ–≥–æ —Ä—É–±–ª—è –≤—ã—Ä—É—á–∫–∏\n‚ñ´Ô∏è –°—Ä–æ–∫–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –í–∞—à–∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç\n‚ñ´Ô∏è –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã–≥–æ–¥–µ–Ω –í–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –æ–Ω –æ–∫—É–ø–∞–µ—Ç—Å—è\n‚ñ´Ô∏è –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã–≥–æ–¥–µ–Ω –í–∞—à –±–∏–∑–Ω–µ—Å"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", callback_data="an_1"))
    #kb.add(InlineKeyboardButton("ROS(–†–µ–Ω—Ç–∞–±–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂)", callback_data="an_2"))
    kb.add(InlineKeyboardButton("–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", callback_data="an_3"))
    kb.add(InlineKeyboardButton("ROI(–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π)", callback_data="an_4"))
    kb.add(InlineKeyboardButton("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", callback_data="an_5"))
    kb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main_menu"))
    file = InputMediaPhoto(open("—Ñ–æ—Ç–æ2.jpeg", "rb"), caption=text)
    await call.message.edit_media(file, reply_markup=kb)


def register_start_handlers(dp):
    dp.register_message_handler(start_command, commands=['start'], state="*")
    dp.register_callback_query_handler(start_query, text='main_menu', state="*")
    dp.register_callback_query_handler(main_menu, text='menu', state="*")