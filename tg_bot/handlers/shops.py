import datetime
import logging
import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tg_bot.keyboards.shops_menu import shops_menu_keyboard, manage_shops_keyboard, shop_management_keyboard, back_to_shops_keyboard
from tg_bot.models import sessionmaker, engine
from tg_bot.models import User, TaxSystemSetting, TaxSystemType
from tg_bot.models import Shop
from tg_bot.handlers.start import start_command
from threading import Thread as th
import requests
from loader2 import get_all_penalties, sync_wb_advertisements
logger = logging.getLogger(__name__)

async def add_shop_callback(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    try:
        await callback.message.edit_text(
            "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\" ‚Üí \"–î–æ—Å—Ç—É–ø –∫ API\"\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ \"–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\"\n"
            "4. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n",
            "<u>–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</u>", parse_mode="HTML",
            reply_markup=keyboard
        )
    except:
        await callback.message.delete()
        await callback.message.answer(
            "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\" ‚Üí \"–î–æ—Å—Ç—É–ø –∫ API\"\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ \"–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\"\n"
            "4. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n",
            reply_markup=keyboard
        )
    await state.set_state("waiting_for_api_token")





def get_seller_name(api_token: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ API-—Ç–æ–∫–µ–Ω—É Wildberries"""
    try:
        url = "https://common-api.wildberries.ru/api/v1/seller-info"
        response = requests.get(url, headers={"Authorization": api_token}, timeout=10)
        if response.status_code == 200:
            return response.json().get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        return None

async def shops_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞–º–∏"""
    session = sessionmaker()(bind=engine)
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        text = "üè™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏</b>"
        keyboard = shops_menu_keyboard()
        
        if user:
            shops = session.query(Shop).filter(Shop.user_id == user.id).all()
            if shops:
                text += "\n\n–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:"
                shop2 = {}
                shop2['id'] = -1
                async with state.proxy() as data:
                    try:
                        shop2['id'] = data['shop']['id']
                    except:
                        pass
                for shop in shops:
                    text += f"\n- {'‚úÖ ' if shop.id == shop2['id'] else ''}{shop.name if shop.name else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: {shop.id})"
            else:
                text += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"
        else:
            text += "\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()


async def process_api_token(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API-—Ç–æ–∫–µ–Ω–∞"""
    api_token = message.text.strip()
    seller_name = get_seller_name(api_token)
    
    if not seller_name:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    
    session = sessionmaker()(bind=engine)
    try:
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            days_14_after = datetime.datetime.now() + datetime.timedelta(days=14)
            user = User(telegram_id=message.from_user.id, subscription_start=datetime.datetime.now(), subscription_end=days_14_after, is_trial_used=True)

            session.add(user)
            session.commit()
            session.refresh(user)
        

        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
        shop = Shop(api_token=api_token, name=seller_name, user_id=user.id)
        session.add(shop)
        session.commit()
        tax_setting = TaxSystemSetting(shop_id=shop.id, tax_system=TaxSystemType.NO_TAX)
        th(target=sync_wb_advertisements, args=(shop,)).start()
        th(target=get_all_penalties, args=(shop,)).start()
        session.add(tax_setting)
        session.commit()

        
        if len(user.shops) == 1:
            async with state.proxy() as data:
                data['shop'] = {
                    'id': shop.id,
                    'name': shop.name,
                    'api_token': shop.api_token
                }
            await message.answer(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω <b>{seller_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω! <u>‚ÄºÔ∏è –í–∞–∂–Ω–æ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–∫–æ–ª–æ 2-3—Ö –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —è –ø–æ–ª—É—á–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –í–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É –∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</u>")
        else:
            await message.answer(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω <b>{seller_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! <u>‚ÄºÔ∏è –í–∞–∂–Ω–æ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–∫–æ–ª–æ 2-3—Ö –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —è –ø–æ–ª—É—á–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –í–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É –∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</u>")
        await start_command(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")
    finally:
        session.close()
        await state.finish()
        # await show_shops_menu(message, state)

async def show_shops_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    session = sessionmaker()(bind=engine)
    try:
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
        current_shop = None
        async with state.proxy() as data:
            print("DATA", data)
            current_shop = data.get('shop', None)
        
        text = "üè™ <b>–í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞</b>"
        
        if current_shop:
            text += f"\n\n‚úÖ –¢–µ–∫—É—â–∏–π –º–∞–≥–∞–∑–∏–Ω: <b>{current_shop['name'] or current_shop['id']}</b>"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        if user and user.shops:
            text += "\n\n–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:"
            for shop in user.shops:
                prefix = "‚úÖ " if current_shop and shop.id == current_shop['id'] else "üîπ "
                text += f"\n{prefix}{shop.name if shop.name else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: {shop.id})"
                
                btn_text = f"‚úÖ –í—ã–±—Ä–∞–Ω" if current_shop and shop.id == current_shop['id'] else "–í—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"
                keyboard.add(InlineKeyboardButton(
                    f"{btn_text} - {shop.name or shop.id}", 
                    callback_data=f"select_shop_{shop.id}"
                ))
        else:
            text += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_shop"))
        keyboard.add(InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏", callback_data="manage_shops"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await message.answer(text, reply_markup=keyboard)
    finally:
        session.close()

async def manage_shops_list_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    session = sessionmaker()(bind=engine)
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        shops = session.query(Shop).filter(Shop.user_id == user.id).all()
        if not user or not shops:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=back_to_shops_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
        current_shop = None
        async with state.proxy() as data:
            current_shop = data.get('shop', None)
        
        text = "üè™ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
        keyboard = manage_shops_keyboard(shops, current_shop)
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

async def manage_shop_callback(callback: types.CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º"""
    print(callback.data)
    shop_id = int(callback.data.split('_')[1])
    async with state.proxy() as data:
        print(data, data.get('shop', None))
    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω
        is_selected = False
        async with state.proxy() as data:
            current_shop = data.get('shop', None)
            is_selected = current_shop and current_shop['id'] == shop.id
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {shop.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>ID –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í—ã–±—Ä–∞–Ω' if is_selected else '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
        )
        
        keyboard = shop_management_keyboard(shop_id, is_selected)
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

async def change_api_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop_id = int(callback.data.split('_')[2])
    await state.update_data(shop_id=shop_id)
    
    await callback.message.edit_text(
        " <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ API-–∫–ª—é—á–∞</b>\n\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\" ‚Üí \"–î–æ—Å—Ç—É–ø –∫ API\"\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ \"–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\"\n"
        "4. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
        "<u>–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</u>", parse_mode="HTML"
    )
    await state.set_state("waiting_for_new_api_token")

async def process_new_api_token(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ API-—Ç–æ–∫–µ–Ω–∞"""
    new_token = message.text.strip()
    seller_name = get_seller_name(new_token)
    
    if not seller_name:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    
    user_data = await state.get_data()
    shop_id = user_data.get('shop_id')
    
    if not shop_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –º–∞–≥–∞–∑–∏–Ω")
        await state.finish()
        return
    
    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if shop:
            shop.api_token = new_token
            shop.name = seller_name
            session.commit()
            await message.answer(f"‚úÖ API-–∫–ª—é—á –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ <b>{seller_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            shop = session.query(Shop).filter(Shop.id == shop_id).first()
            th(target=sync_wb_advertisements, args=(shop,)).start()
            th(target=get_all_penalties, args=(shop,)).start()
        else:
            await message.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API-–∫–ª—é—á–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API-–∫–ª—é—á–∞")
    finally:
        session.close()
        await state.finish()
        await start_command(message, state)

async def delete_shop_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop_id = int(callback.data.split('_')[2])
    
    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{shop_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_{shop_id}")
        )
        
        await callback.message.edit_text(
            f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω <b>{shop.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>?\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=keyboard
        )
    finally:
        session.close()

async def confirm_delete_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop_id = int(callback.data.split('_')[2])
    
    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if shop:
            shop_name = shop.name or f"–ú–∞–≥–∞–∑–∏–Ω {shop.id}"
            session.delete(shop)
            session.commit()
            await callback.message.edit_text(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω <b>{shop_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            await callback.answer()
            
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await show_shops_menu(callback.message, state)
        else:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    finally:
        session.close()

async def select_shop_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop_id = int(callback.data.split('_')[2])

    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ state
        async with state.proxy() as data:
            data['shop'] = {
                'id': shop.id,
                'name': shop.name,
                'api_token': shop.api_token
            }
        
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: {shop.name or shop.id}")
    finally:
        session.close()
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω
        is_selected = False
        async with state.proxy() as data:
            current_shop = data.get('shop', None)
            is_selected = current_shop and current_shop['id'] == shop.id
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {shop.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>ID –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í—ã–±—Ä–∞–Ω' if is_selected else '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
        )
        
        keyboard = shop_management_keyboard(shop_id, is_selected)
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

async def unselect_shop_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop_id = int(callback.data.split('_')[2])
    
    async with state.proxy() as data:
        current_shop = data.get('shop', None)
        if current_shop and current_shop['id'] == shop_id:
            print(data)
            del data['shop']
            await callback.answer("‚ùå –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º
    # await manage_shop_callback(callback, state)
    session = sessionmaker()(bind=engine)
    try:
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω
        is_selected = False
        async with state.proxy() as data:
            current_shop = data.get('shop', None)
            is_selected = current_shop and current_shop['id'] == shop.id
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {shop.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>ID –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í—ã–±—Ä–∞–Ω' if is_selected else '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
        )
        
        keyboard = shop_management_keyboard(shop_id, is_selected)
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

def register_shops_handlers(dp):
    dp.register_callback_query_handler(shops_menu_callback, text="shops_menu", state="*")
    dp.register_callback_query_handler(add_shop_callback, text="add_shop", state="*")
    dp.register_message_handler(process_api_token, state="waiting_for_api_token")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    dp.register_callback_query_handler(manage_shops_list_callback, text="manage_shops", state="*")
    dp.register_callback_query_handler(manage_shop_callback, lambda c: c.data.startswith('manage_') and c.data != 'manage_shops', state="*")
    dp.register_callback_query_handler(change_api_callback, lambda c: c.data.startswith('change_api_'), state="*")
    dp.register_message_handler(process_new_api_token, state="waiting_for_new_api_token")
    dp.register_callback_query_handler(delete_shop_callback, lambda c: c.data.startswith('delete_shop_'), state="*")
    dp.register_callback_query_handler(confirm_delete_callback, lambda c: c.data.startswith('confirm_delete_'), state="*")
    dp.register_callback_query_handler(select_shop_callback, lambda c: c.data.startswith('select_shop_'), state="*")
    dp.register_callback_query_handler(unselect_shop_callback, lambda c: c.data.startswith('unselect_shop_'), state="*")
