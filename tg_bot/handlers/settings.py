import logging
import io
import openpyxl
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from tg_bot.models import Shop, sessionmaker, engine, User, Order
from tg_bot.models import (
    TaxSystemSetting, TaxSystemType,
    ProductCost,
    RegularExpense, RegularExpenseFrequency,
    OneTimeExpense
)
from tg_bot.states.settings_states import SettingsStates
from tg_bot.keyboards.settings_menu import (
    tax_system_keyboard,
    regular_expense_frequency_keyboard,
    settings_menu_keyboard
)
from datetime import datetime

TAX_MAPPING = {
    "usn_6": TaxSystemType.USN_6,
    "notax": TaxSystemType.NO_TAX
}

logger = logging.getLogger(__name__)
async def daily_reports_callback(callback: types.CallbackQuery, state):
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
    session = sessionmaker(bind=engine)()
    try:
        user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            user.daily_reports_enabled = not user.daily_reports_enabled
            session.commit()
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.daily_reports_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã {status}!", show_alert=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.daily_reports_enabled:
                await callback.message.answer(
                    "üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
                    "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 12:00\n"
                    "üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥–æ–µ 3 —á–∏—Å–ª–æ –≤ 12:00\n\n"
                    "–û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
                )
            else:
                await callback.message.answer(
                    "‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã."
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=settings_menu_keyboard(user.shops[0].id, user.daily_reports_enabled)
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        else:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    finally:
        session.close()


async def settings_callback(callback: types.CallbackQuery, state: FSMContext):
    await SettingsStates.menu.set()
    Session = sessionmaker()
    session = Session(bind=engine)
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    shop = session.query(Shop).filter(Shop.user_id==user.id).first()
    async with state.proxy() as data:
        data['shop'] = {
            'id': shop.id,
            'name': shop.name,
            'api_token': shop.api_token
        }
    session.close()
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=settings_menu_keyboard(shop.id, user.daily_reports_enabled)
        )
    except:
        await callback.message.delete()
        await callback.message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=settings_menu_keyboard(shop.id, user.daily_reports_enabled)
        )

async def back_to_settings(callback: types.CallbackQuery, state: FSMContext):
    await settings_callback(callback, state)

async def back_to_settings(callback: types.CallbackQuery, state: FSMContext):
    await SettingsStates.menu.set()
    Session = sessionmaker()
    session = Session(bind=engine)
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    shop = session.query(Shop).filter(Shop.user_id==user.id).first()
    session.close()
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=settings_menu_keyboard(shop.id, user.daily_reports_enabled)
    )
async def back_to_settings_message(message: types.Message, state: FSMContext):
    await SettingsStates.menu.set()
    Session = sessionmaker()
    session = Session(bind=engine)
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    shop = session.query(Shop).filter(Shop.user_id==user.id).first()
    session.close()
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=settings_menu_keyboard(shop.id, user.daily_reports_enabled)
    )

async def product_cost_callback_helper(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", callback_data="upload_cost_excel"),
        InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="download_cost_template"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    )
    await message.answer(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∞—Ä—Ç–∏–∫—É–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
async def tax_settings_callback(callback: types.CallbackQuery, state: FSMContext):
    print(f"tax_settings_callback called with data: {callback.data}")
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            print(f"State data: {data}")
            if 'shop' not in data:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
                return
            shop_id = data['shop']['id']
            print(f"Shop ID: {shop_id}")
        
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_tax = shop.tax_settings.tax_system if shop.tax_settings else None
        print(f"Current tax: {current_tax}")
        
        text = "<b>–ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        if current_tax:
            text += f"–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>{current_tax.value}</b>\n\n"
        else:
            text += "‚ùå –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è:"
        
        try:
            await callback.message.edit_text(text, reply_markup=tax_system_keyboard(current_tax))
        except Exception as edit_error:
            print(f"Edit error: {edit_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            await callback.message.answer(text, reply_markup=tax_system_keyboard(current_tax))
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        
        await SettingsStates.tax_system.set()
    except Exception as e:
        print(f"Error in tax_settings_callback: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        session.close()

async def set_custom_tax_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–ª–æ–≥–∞"""
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15 –¥–ª—è 15%):",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tax_settings")
        )
    )
    await SettingsStates.waiting_for_tax_percent.set()

async def process_tax_percent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–ª–æ–≥–∞"""
    try:
        tax_percent = float(message.text.strip())
        print("–í–≤–µ–¥–µ–Ω–Ω—ã–π custom_percent = ", tax_percent)  # ‚Üê –ó–î–ï–°–¨
        
        if 0 <= tax_percent <= 100:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            async with state.proxy() as data:
                data['custom_tax_percent'] = tax_percent
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            session = sessionmaker()(bind=engine)
            try:
                shop_id = data['shop']['id']
                shop = session.query(Shop).filter(Shop.id == shop_id).first()
                
                if shop.tax_settings:
                    shop.tax_settings.tax_system = TaxSystemType.CUSTOM
                    shop.tax_settings.custom_percent = tax_percent
                else:
                    tax_setting = TaxSystemSetting(
                        shop_id=shop_id, 
                        tax_system=TaxSystemType.CUSTOM,
                        custom_percent=tax_percent
                    )
                    session.add(tax_setting)
                
                session.commit()
                await message.answer(f"‚úÖ –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {tax_percent}%")
                await back_to_settings_message(message, state)
            finally:
                session.close()
        else:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def set_tax_system_callback(callback: types.CallbackQuery, state: FSMContext):
    tax_type_value = callback.data.split('_', 1)[1]
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
    tax_type = None
    if tax_type_value == "usn6":
        tax_type = TaxSystemType.USN_6
        print("tax_type = ", tax_type)
    elif tax_type_value == "notax":
        tax_type = TaxSystemType.NO_TAX
        print("tax_type = ", tax_type)
    elif tax_type_value == "custom":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        await set_custom_tax_callback(callback, state)
        return        
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        return
    
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        shop = session.query(Shop).filter(Shop.id == shop_id).first()
        if not shop:
            await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if shop.tax_settings:
            shop.tax_settings.tax_system = tax_type
        else:
            tax_setting = TaxSystemSetting(shop_id=shop_id, tax_system=tax_type)
            session.add(tax_setting)
        
        session.commit()
        await callback.answer(f"‚úÖ –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {tax_type.value}")
        await back_to_settings(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã")
    finally:
        session.close()
# –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–æ–≤
async def product_cost_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", callback_data="upload_cost_excel"),
        # InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data="download_cost_excel"),
        InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="download_cost_template"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    )
    await SettingsStates.product_cost.set()
    await callback.message.edit_text(
        " <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∞—Ä—Ç–∏–∫—É–ª–æ–≤</b>\n\n–°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel.",
        reply_markup=keyboard
    )

async def download_cost_template_callback(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel
    session = sessionmaker(bind=engine)()
    shop = session.query(Shop).filter(Shop.user_id==session.query(User).filter(User.telegram_id==callback.from_user.id).first().id).first()
    articles = [str(item[0]) for item in session.query(Order.supplierArticle).filter(Order.shop_id==shop.id).distinct().all()]

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"
    ws.append(["–ê—Ä—Ç–∏–∫—É–ª", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"])

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã
    for i, article in enumerate(articles, 2):
        ws[f'A{i}'] = article

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = io.BytesIO()
    wb.save(temp_file)
    temp_file.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = InputFile(temp_file, filename="—à–∞–±–ª–æ–Ω_—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.xlsx")
    await callback.message.answer_document(file, caption="üìù –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    await callback.answer()

async def download_cost_excel_callback(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        costs = session.query(ProductCost).filter(ProductCost.shop_id == shop_id).all()
        
        if not costs:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ws.append(["–ê—Ä—Ç–∏–∫—É–ª", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"])
        
        for cost in costs:
            ws.append([cost.article, cost.cost])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        file_stream = io.BytesIO()
        wb.save(file_stream)
        file_stream.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = InputFile(file_stream, filename="—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å_–∞—Ä—Ç–∏–∫—É–ª–æ–≤.xlsx")
        await callback.message.answer_document(file, caption="üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        session.close()
        await callback.answer()

async def upload_cost_excel_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "Ô∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ö–æ–ª–æ–Ω–∫–∞ A: –ê—Ä—Ç–∏–∫—É–ª\n"
        "–ö–æ–ª–æ–Ω–∫–∞ B: –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
        "<i>–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</i>"
    )
    await SettingsStates.waiting_for_cost_file.set()

async def process_cost_file(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")
        return
    
    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
        return
    
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await message.bot.download_file(file_path)
        
        # –ü–∞—Ä—Å–∏–º Excel
        wb = openpyxl.load_workbook(io.BytesIO(downloaded_file.read()))
        ws = wb.active
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cost_data = {}
        for row in ws.iter_rows(min_row=2, values_only=True):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if row[0] and row[1]:
                article = row[0]
                try:
                    cost = row[1]
                    cost_data[article] = cost
                except (ValueError, TypeError):
                    continue
        
        if not cost_data:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        existing_costs = {cost.article: cost for cost in session.query(ProductCost)
            .filter(ProductCost.shop_id == shop_id)
            .filter(ProductCost.article.in_(cost_data.keys()))
            .all()}
        
        for article, cost_value in cost_data.items():
            if article in existing_costs:
                existing_costs[str(article)].cost = cost_value
            else:
                new_cost = ProductCost(shop_id=shop_id, article=article, cost=cost_value)
                session.add(new_cost)
        
        session.commit()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(cost_data)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        session.close()
        await SettingsStates.product_cost.set()
        await product_cost_callback_helper(message)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
async def regular_expenses_callback(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        count = session.query(RegularExpense).filter(
            RegularExpense.shop_id == shop_id
        ).count()
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_regular_expense"),
            InlineKeyboardButton(f"üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({count})", callback_data="list_regular_expenses"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        )
        
        await SettingsStates.regular_expenses.set()
        await callback.message.edit_text(
            " <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã</b>\n\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –±–∏–∑–Ω–µ—Å–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥.",
            reply_markup=keyboard
        )
    finally:
        session.close()

async def add_regular_expense_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üîÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:"
    )
    await SettingsStates.waiting_for_regular_amount.set()

async def process_regular_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        async with state.proxy() as data:
            data['regular_amount'] = amount
        
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
        await SettingsStates.waiting_for_regular_description.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")

async def process_regular_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['regular_description'] = message.text
    
    await message.answer(
        "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–∞:</b>",
        reply_markup=regular_expense_frequency_keyboard()
    )
    await SettingsStates.waiting_for_regular_frequency.set()

async def set_regular_frequency(callback: types.CallbackQuery, state: FSMContext):
    frequency = RegularExpenseFrequency(callback.data.split('_')[1])
    
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
            amount = data['regular_amount']
            description = data['regular_description']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        expense = RegularExpense(
            shop_id=shop_id,
            amount=amount,
            description=description,
            frequency=frequency
        )
        session.add(expense)
        session.commit()
        
        await callback.answer(f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {frequency.value}")
        await back_to_settings(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
    finally:
        session.close()

# –†–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
async def one_time_expenses_callback(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        count = session.query(OneTimeExpense).filter(
            OneTimeExpense.shop_id == shop_id
        ).count()
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_one_time_expense"),
            InlineKeyboardButton(f"üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({count})", callback_data="list_one_time_expenses"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        )
        
        await SettingsStates.one_time_expenses.set()
        await callback.message.edit_text(
            " <b>–í–∞—à–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è</b>\n\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –¢—É–¥–∞ –≤—Ö–æ–¥—è—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –ò–ü, –∑–∞–∫—É–ø–∫–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –¥–µ–ª–∞–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞, –∞ –Ω–µ –∏–∑ –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.",
            reply_markup=keyboard
        )
    finally:
        session.close()

async def list_regular_expenses_callback(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        expenses = session.query(RegularExpense).filter(
            RegularExpense.shop_id == shop_id
        ).order_by(RegularExpense.created_at.desc()).all()
        
        if not expenses:
            await callback.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç", show_alert=True)
            return
        
        text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for expense in expenses:
            freq_map = {
                RegularExpenseFrequency.DAILY: "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
                RegularExpenseFrequency.WEEKLY: "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                RegularExpenseFrequency.MONTHLY: "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
            }
            frequency = freq_map.get(expense.frequency, expense.frequency.value)
            
            text += (
                f"üí∞ <b>{expense.amount:.2f} —Ä—É–±.</b> {frequency}\n"
                f"üìù {expense.description}\n"
                f"üÜî ID: {expense.id}\n\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keyboard.add(InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ {expense.id}",
                callback_data=f"delete_regular_{expense.id}"
            ))
        
        text += "‚ÑπÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –Ω–∏–∂–µ"
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="regular_expenses"))
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
async def delete_regular_expense_callback(callback: types.CallbackQuery, state: FSMContext):
    expense_id = int(callback.data.split('_')[2])
    
    session = sessionmaker()(bind=engine)
    try:
        expense = session.query(RegularExpense).get(expense_id)
        if not expense:
            await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        session.delete(expense)
        session.commit()
        
        await callback.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {expense_id} —É–¥–∞–ª–µ–Ω!")
        await list_regular_expenses_callback(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        session.close()

# –†–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - —Å–ø–∏—Å–æ–∫
async def list_one_time_expenses_callback(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
        
        expenses = session.query(OneTimeExpense).filter(
            OneTimeExpense.shop_id == shop_id
        ).order_by(OneTimeExpense.expense_date.desc()).all()
        
        if not expenses:
            await callback.answer(" –°–ø–∏—Å–æ–∫ —Ä–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç", show_alert=True)
            return
        
        text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for expense in expenses:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = expense.expense_date.strftime("%d.%m.%Y")
            
            text += (
                f"üí∞ <b>{expense.amount:.2f} —Ä—É–±.</b> ({date_str})\n"
                f"üìù {expense.description}\n"
                f"üÜî ID: {expense.id}\n\n"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keyboard.add(InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ {expense.id}",
                callback_data=f"delete_onetime_{expense.id}"
            ))
        
        text += "‚ÑπÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –Ω–∏–∂–µ"
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="one_time_expenses"))
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
async def delete_onetime_expense_callback(callback: types.CallbackQuery):
    expense_id = int(callback.data.split('_')[2])
    
    session = sessionmaker()(bind=engine)
    try:
        expense = session.query(OneTimeExpense).get(expense_id)
        if not expense:
            await callback.answer("‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        session.delete(expense)
        session.commit()
        
        await callback.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {expense_id} —É–¥–∞–ª–µ–Ω!")
        await list_one_time_expenses_callback(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        session.close()

async def add_one_time_expense_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:"
    )
    await SettingsStates.waiting_for_onetime_amount.set()

async def process_onetime_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        async with state.proxy() as data:
            data['onetime_amount'] = amount
        
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
        await SettingsStates.waiting_for_onetime_description.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")

async def process_onetime_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        amount = data['onetime_amount']
        description = message.text
    session = sessionmaker()(bind=engine)
    try:
        expense = OneTimeExpense(
            shop_id=shop_id,
            amount=amount,
            description=description,
            expense_date=datetime.now()  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
        )
        session.add(expense)
        session.commit()

        await message.answer("‚úÖ –†–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")
        await back_to_settings_message(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
        await message.answer("‚úÖ –†–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")
    finally:
        session.close()

async def set_onetime_date(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data['shop']['id']
            amount = data['onetime_amount']
            description = data['onetime_description']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        expense = OneTimeExpense(
            shop_id=shop_id,
            amount=amount,
            description=description,
            expense_date=datetime.now()  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
        )
        session.add(expense)
        session.commit()
        
        await callback.answer("‚úÖ –†–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")
        await back_to_settings(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
    finally:
        session.close()

async def process_onetime_date(message: types.Message, state: FSMContext):
    try:
        day, month, year = map(int, message.text.split('.'))
        expense_date = datetime(year, month, day)
        
        if expense_date > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
        
        session = sessionmaker()(bind=engine)
        try:
            async with state.proxy() as data:
                shop_id = data['shop']['id']
                amount = data['onetime_amount']
                description = data['onetime_description']
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            expense = OneTimeExpense(
                shop_id=shop_id,
                amount=amount,
                description=description,
                expense_date=expense_date
            )
            session.add(expense)
            session.commit()
            
            await message.answer("‚úÖ –†–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")
            await back_to_settings(message, state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
        finally:
            session.close()
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

async def test_reports_callback(callback: types.CallbackQuery, state):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        from tg_bot.services.scheduler import ReportScheduler
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        scheduler = ReportScheduler(callback.bot)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await callback.answer("–¢–µ—Å—Ç–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...", show_alert=True)
        await scheduler.send_weekly_report()
        
        await callback.message.answer("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_settings_handlers(dp):
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
    dp.register_callback_query_handler(daily_reports_callback, text="daily_reports", state="*")
    # –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    dp.register_callback_query_handler(test_reports_callback, text="test_reports", state="*")
    # –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞" - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    dp.register_callback_query_handler(
        set_custom_tax_callback, 
        lambda c: c.data == "tax_custom", 
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    dp.register_message_handler(
        process_tax_percent, 
        state=SettingsStates.waiting_for_tax_percent
    )

    dp.register_callback_query_handler(tax_settings_callback, text="tax_settings", state="*")
    dp.register_callback_query_handler(set_tax_system_callback, lambda c: c.data.startswith("tax_") and c.data != "tax_settings", state=SettingsStates.tax_system)
    
    # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    dp.register_callback_query_handler(product_cost_callback, text="product_cost", state="*")
    dp.register_callback_query_handler(download_cost_template_callback, text="download_cost_template", state=SettingsStates.product_cost)
    dp.register_callback_query_handler(download_cost_excel_callback, text="download_cost_excel", state=SettingsStates.product_cost)
    dp.register_callback_query_handler(upload_cost_excel_callback, text="upload_cost_excel", state=SettingsStates.product_cost)
    dp.register_message_handler(process_cost_file, content_types=types.ContentType.DOCUMENT, state=SettingsStates.waiting_for_cost_file)
    
    dp.register_callback_query_handler(regular_expenses_callback, text="regular_expenses", state="*")
    dp.register_callback_query_handler(add_regular_expense_callback, text="add_regular_expense", state=SettingsStates.regular_expenses)
    dp.register_message_handler(process_regular_amount, state=SettingsStates.waiting_for_regular_amount)
    dp.register_message_handler(process_regular_description, state=SettingsStates.waiting_for_regular_description)
    dp.register_callback_query_handler(set_regular_frequency, lambda c: c.data.startswith("frequency_"), state=SettingsStates.waiting_for_regular_frequency)
    
    dp.register_callback_query_handler(one_time_expenses_callback, text="one_time_expenses", state="*")
    dp.register_callback_query_handler(add_one_time_expense_callback, text="add_one_time_expense", state=SettingsStates.one_time_expenses)
    dp.register_message_handler(process_onetime_amount, state=SettingsStates.waiting_for_onetime_amount)
    dp.register_message_handler(process_onetime_description, state=SettingsStates.waiting_for_onetime_description)
    dp.register_callback_query_handler(set_onetime_date, text="expense_date_today", state=SettingsStates.waiting_for_onetime_date)
    dp.register_message_handler(process_onetime_date, state=SettingsStates.waiting_for_onetime_date)

    # After start
    dp.register_callback_query_handler(settings_callback, text="settings", state="*")
    dp.register_callback_query_handler(back_to_settings, text="back_to_settings", state="*")

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    dp.register_callback_query_handler(
        list_regular_expenses_callback, 
        text="list_regular_expenses", 
        state=SettingsStates.regular_expenses
    )
    dp.register_callback_query_handler(
        delete_regular_expense_callback, 
        lambda c: c.data.startswith("delete_regular_"), 
        state="*"
    )
    
    # –†–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    dp.register_callback_query_handler(
        list_one_time_expenses_callback, 
        text="list_one_time_expenses", 
        state=SettingsStates.one_time_expenses
    )
    dp.register_callback_query_handler(
        delete_onetime_expense_callback, 
        lambda c: c.data.startswith("delete_onetime_"), 
        state="*"
    )
