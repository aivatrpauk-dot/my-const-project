# tg_bot/handlers/admin.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from tg_bot.models import sessionmaker, engine, User
import logging
import asyncio
import os
from pathlib import Path


#ADMIN_IDS = [1924535035, 1441962095, 1275991975, 1275991975]
ADMIN_IDS = [1144068556, 877437439]

logger = logging.getLogger(__name__)

async def admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
        InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", callback_data="admin_cache_stats"),
        InlineKeyboardButton("üîô –í—ã—Ö–æ–¥", callback_data="main_menu")
    )
    
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard)

async def admin_analytics_callback(callback: types.CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    session = sessionmaker(bind=engine)()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        current_month_start = datetime(now.year, now.month, 1)
        prev_month_start = (current_month_start - timedelta(days=1)).replace(day=1)
        
        # 1. –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        total_users = session.query(User).count()
        
        # 2. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subscriptions = session.query(User).filter(
            User.subscription_end > now
        ).count()
        
        # 3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        conversion = (active_subscriptions / total_users * 100) if total_users > 0 else 0
        
        # 4. –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        new_users_week = session.query(User).filter(
            User.created_at >= week_ago
        ).count()
        
        new_users_month = session.query(User).filter(
            User.created_at >= month_ago
        ).count()
        
        # 5-7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–∞–º
        current_month_payments = session.query(User).filter(
            User.subscription_start >= current_month_start
        ).count()
        
        prev_month_payments = session.query(User).filter(
            User.subscription_start >= prev_month_start,
            User.subscription_start < current_month_start
        ).count()
        
        payment_diff = current_month_payments - prev_month_payments
        payment_diff_percent = (current_month_payments / prev_month_payments * 100) if prev_month_payments > 0 else 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        payment_diff_icon = "üü¢" if payment_diff > 0 else "üî¥"
        payment_percent_icon = "üü¢" if payment_diff_percent > 100 else "üî¥"
        
        text = (
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"1Ô∏è‚É£ <b>–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π:</b> {total_users}\n"
            f"2Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {active_subscriptions}\n"
            f"3Ô∏è‚É£ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> {conversion:.2f}%\n"
            f"4Ô∏è‚É£ <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"   - –ó–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
            f"   - –ó–∞ –º–µ—Å—è—Ü: {new_users_month}\n\n"
            "üí≥ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç:</b>\n"
            f"5Ô∏è‚É£ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month_payments}\n"
            f"   –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_payments}\n"
            f"6Ô∏è‚É£ –ü—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫: {payment_diff_icon} {payment_diff}\n"
            f"7Ô∏è‚É£ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {payment_percent_icon} {payment_diff_percent:.2f}%\n"
            f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {now.strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_analytics"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))

        await callback.message.edit_text(text, reply_markup=keyboard)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        session.close()

async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        )
    )
    await state.set_state("admin_broadcast")

async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await state.finish()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.update_data(
        broadcast_message=message.to_python(),
        broadcast_type=message.content_type
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_broadcast"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_panel")
    )
    
    await message.answer(
        "üì§ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {await get_total_users()}\n"
        "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=keyboard
    )

async def confirm_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    data = await state.get_data()
    await state.finish()
    
    if 'broadcast_message' not in data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    total_users = await get_total_users()
    success = 0
    errors = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = await callback.message.answer(
        f"‚è≥ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    session = sessionmaker(bind=engine)()
    users = session.query(User).all()
    session.close()
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for user in users:
        try:
            msg_data = data['broadcast_message']
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if data['broadcast_type'] == 'text':
                await callback.bot.send_message(
                    user.telegram_id,
                    msg_data['text'],
                    parse_mode='HTML'
                )
            elif data['broadcast_type'] == 'photo':
                await callback.bot.send_photo(
                    user.telegram_id,
                    photo=msg_data['photo'][-1]['file_id'],
                    caption=msg_data.get('caption', ''),
                    parse_mode='HTML'
                )
            elif data['broadcast_type'] == 'document':
                await callback.bot.send_document(
                    user.telegram_id,
                    document=msg_data['document']['file_id'],
                    caption=msg_data.get('caption', ''),
                    parse_mode='HTML'
                )
            elif data['broadcast_type'] == 'video':
                await callback.bot.send_video(
                    user.telegram_id,
                    video=msg_data['video']['file_id'],
                    caption=msg_data.get('caption', ''),
                    parse_mode='HTML'
                )
            
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user.telegram_id}: {e}")
            errors += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
        if (success + errors) % 10 == 0:
            await status_message.edit_text(
                f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {errors}"
            )
        # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await asyncio.sleep(0.1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {errors}"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=keyboard)

async def admin_panel_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
        InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", callback_data="admin_cache_stats"),
        InlineKeyboardButton("üîô –í—ã—Ö–æ–¥", callback_data="main_menu")
    )
    
    await callback.message.edit_text("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard)

async def get_total_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    session = sessionmaker(bind=engine)()
    try:
        return session.query(User).count()
    finally:
        session.close()

async def clear_cache_command(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏–∑ wb_api
        from tg_bot.services.wb_api import clear_all_cache
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        clear_all_cache()
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cache_file = Path("wb_cache_data.json")
        if cache_file.exists():
            cache_file.unlink()
            await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n\n- –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞\n- –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞\n\n–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å API Wildberries.")
        else:
            await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n\n- –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞\n\n–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å API Wildberries.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")

async def admin_clear_cache_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏–∑ wb_api
        from tg_bot.services.wb_api import clear_all_cache
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        clear_all_cache()
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cache_file = Path("wb_cache_data.json")
        if cache_file.exists():
            cache_file.unlink()
            await callback.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n\n- –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞\n- –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞", show_alert=True)
        else:
            await callback.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n\n- –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}", show_alert=True)

async def admin_cache_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        from tg_bot.models import WBCacheData
        
        session = sessionmaker(bind=engine)()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        total_cache_records = session.query(WBCacheData).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        orders_cache = session.query(WBCacheData).filter(WBCacheData.cache_type == "orders").count()
        sales_cache = session.query(WBCacheData).filter(WBCacheData.cache_type == "sales").count()
        finance_cache = session.query(WBCacheData).filter(WBCacheData.cache_type == "finance").count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
        unique_shops = session.query(WBCacheData.shop_id).distinct().count()
        
        # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –∫—ç—à
        oldest_cache = session.query(WBCacheData).order_by(WBCacheData.cache_timestamp.asc()).first()
        newest_cache = session.query(WBCacheData).order_by(WBCacheData.cache_timestamp.desc()).first()
        
        # –†–∞–∑–º–µ—Ä –∫—ç—à–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        cache_size_mb = total_cache_records * 0.1  # –ü—Ä–∏–º–µ—Ä–Ω–æ 100KB –Ω–∞ –∑–∞–ø–∏—Å—å
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ WB API</b>\n\n"
            f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_cache_records}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {unique_shops}\n"
            f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {cache_size_mb:.1f} MB\n\n"
            f"üìã <b>–ü–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö:</b>\n"
            f"‚Ä¢ Orders: {orders_cache}\n"
            f"‚Ä¢ Sales: {sales_cache}\n"
            f"‚Ä¢ Finance: {finance_cache}\n\n"
        )
        
        if oldest_cache and newest_cache:
            oldest_time = oldest_cache.cache_timestamp.strftime("%Y-%m-%d %H:%M")
            newest_time = newest_cache.cache_timestamp.strftime("%Y-%m-%d %H:%M")
            stats_text += (
                f"‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:</b>\n"
                f"‚Ä¢ –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫—ç—à: {oldest_time}\n"
                f"‚Ä¢ –°–∞–º—ã–π –Ω–æ–≤—ã–π –∫—ç—à: {newest_time}\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        )
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", show_alert=True)
    finally:
        session.close()

def register_admin_handlers(dp):
    dp.register_message_handler(admin_command, commands=['admin'])
    dp.register_message_handler(admin_command, commands=['admin'], state="*")
    dp.register_message_handler(clear_cache_command, commands=['clearcache'])
    dp.register_message_handler(clear_cache_command, commands=['clearcache'], state="*")
    dp.register_callback_query_handler(admin_panel_callback, text="admin_panel")
    dp.register_callback_query_handler(admin_panel_callback, text="admin_panel", state="*")
    dp.register_callback_query_handler(admin_analytics_callback, text="admin_analytics")
    dp.register_callback_query_handler(admin_analytics_callback, text="admin_analytics", state="*")
    dp.register_callback_query_handler(admin_broadcast_callback, text="admin_broadcast", state="*")
    dp.register_callback_query_handler(admin_clear_cache_callback, text="admin_clear_cache")
    dp.register_callback_query_handler(admin_clear_cache_callback, text="admin_clear_cache", state="*")
    dp.register_callback_query_handler(admin_cache_stats_callback, text="admin_cache_stats")
    dp.register_message_handler(process_broadcast_message, content_types=types.ContentTypes.ANY, state="admin_broadcast")
    dp.register_callback_query_handler(confirm_broadcast_callback, text="confirm_broadcast", state="*")