import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.dispatcher import FSMContext
from tg_bot.models import sessionmaker, engine, User, Payment

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Payments - –≤–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ –∫–æ–¥
TELEGRAM_PAYMENT_CONFIG = {
    'provider_token': 'YOUR_TELEGRAM_PAYMENT_PROVIDER_TOKEN_HERE',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    'currency': 'RUB'
}

# –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_STATUS = {
    'PENDING': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'SUCCESS': '–û–ø–ª–∞—á–µ–Ω',
    'FAILED': '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
    'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω'
}

class TelegramPaymentHandler:
    def __init__(self):
        self.provider_token = TELEGRAM_PAYMENT_CONFIG['provider_token']
        self.currency = TELEGRAM_PAYMENT_CONFIG['currency']
    
    async def create_invoice(self, user_id: int, amount: int, title: str, description: str, payload: str = None):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session = sessionmaker()(bind=engine)
            try:
                payment = Payment(
                    user_id=user_id,
                    amount=amount,
                    currency=self.currency,
                    status='PENDING',
                    payment_method='telegram',
                    created_at=datetime.utcnow()
                )
                session.add(payment)
                session.commit()
                payment_id = payment.id
            finally:
                session.close()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram
            prices = [LabeledPrice(label=title, amount=amount * 100)]  # amount –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            
            invoice_data = {
                'title': title,
                'description': description,
                'payload': payload or f"payment_{payment_id}",
                'provider_token': self.provider_token,
                'currency': self.currency,
                'prices': prices,
                'start_parameter': f"payment_{payment_id}",
                'need_name': False,
                'need_phone_number': False,
                'need_email': False,
                'need_shipping_address': False,
                'send_phone_number_to_provider': False,
                'send_email_to_provider': False,
                'is_flexible': False
            }
            
            return invoice_data, payment_id
            
        except Exception as e:
            logger.error(f"Error creating invoice: {e}")
            return None, None
    
    async def process_successful_payment(self, payment_id: int, telegram_payment_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        session = sessionmaker()(bind=engine)
        try:
            payment = session.query(Payment).filter(Payment.id == payment_id).first()
            if payment:
                payment.status = 'SUCCESS'
                payment.telegram_payment_id = telegram_payment_id
                payment.paid_at = datetime.utcnow()
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter(User.id == payment.user_id).first()
                if user:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
                    if payment.amount >= 299:  # 299 —Ä—É–±–ª–µ–π = 1 –º–µ—Å—è—Ü
                        subscription_days = 30
                    else:
                        subscription_days = 7  # –î–µ–º–æ –ø–µ—Ä–∏–æ–¥
                    
                    user.subscription_end = datetime.utcnow() + timedelta(days=subscription_days)
                    user.is_subscribed = True
                
                session.commit()
                return True
        except Exception as e:
            logger.error(f"Error processing successful payment: {e}")
            session.rollback()
        finally:
            session.close()
        return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
payment_handler = TelegramPaymentHandler()

async def show_telegram_payment_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üí≥ 1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="telegram_pay_month"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_menu")
    )
    
    await callback.message.edit_text(
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram</b>\n\n"
        "–¢–∞—Ä–∏—Ñ: 299‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Payments",
        reply_markup=keyboard
    )

async def handle_telegram_payment_month(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –º–µ—Å—è—Ü"""
    await create_telegram_payment(callback, 299, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", "–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –Ω–∞ 30 –¥–Ω–µ–π")

async def create_telegram_payment(callback: types.CallbackQuery, amount: int, title: str, description: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram"""
    if not payment_handler.provider_token:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    session = sessionmaker()(bind=engine)
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    finally:
        session.close()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    invoice_data, payment_id = await payment_handler.create_invoice(user_id, amount, title, description)
    
    if not invoice_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.bot.send_invoice(
            chat_id=user_id,
            **invoice_data
        )
        await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"Error sending invoice: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã", show_alert=True)

async def handle_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

async def handle_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    try:
        payment_info = message.successful_payment
        payment_id = int(payment_info.invoice_payload.split('_')[1])
        
        success = await payment_handler.process_successful_payment(
            payment_id, 
            payment_info.telegram_payment_charge_id
        )
        
        if success:
            await message.answer(
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Error handling successful payment: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )

def register_telegram_payment_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –ø–ª–∞—Ç–µ–∂–µ–π"""
    dp.register_callback_query_handler(show_telegram_payment_menu, lambda c: c.data == "telegram_payment_menu")
    dp.register_callback_query_handler(handle_telegram_payment_month, lambda c: c.data == "telegram_pay_month")
    dp.register_pre_checkout_query_handler(handle_pre_checkout)
    dp.register_message_handler(handle_successful_payment, content_types=types.ContentTypes.SUCCESSFUL_PAYMENT) 