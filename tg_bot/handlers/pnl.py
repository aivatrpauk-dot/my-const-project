#PNL –û—à–∏–±–∫–∞
import logging
import asyncio
import openpyxl
import pandas as pd
from openpyxl import load_workbook
import io
from datetime import datetime, timedelta, datetime as dt
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from tg_bot.models import sessionmaker, engine
from tg_bot.models import Shop, Advertisement, Penalty
from tg_bot.models import (
    TaxSystemType, TaxSystemSetting,
    ProductCost, RegularExpense, OneTimeExpense
)
from tg_bot.keyboards.pnl_menu import pnl_period_keyboard
from tg_bot.services.wb_api import fetch_full_report, fetch_report_detail_by_period
from tg_bot.states.pnl_states import PNLStates
from dateutil.relativedelta import relativedelta
from tg_bot.models import Order

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é P&L
async def pnl_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if 'shop' not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
    
    keyboard = pnl_period_keyboard()
    await callback.message.answer(
        "üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ (P&L)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await PNLStates.waiting_for_period.set()

async def generate_pnl_excel_report(shop_id: int, shop_api_token: str, start_date: datetime, end_date: datetime, shop_name: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ PNL"""

    session = sessionmaker()(bind=engine)
    try:
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API
        loop = asyncio.get_event_loop()
        full_data = await loop.run_in_executor(
            None,
            fetch_report_detail_by_period,
            shop_api_token,
            start_date,
            end_date
        )    
    
        report_data = full_data['finance']
        orders = full_data['orders']
        sales = full_data['sales']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        DATE_FROM = start_date.strftime("%Y-%m-%d")
        DATE_TO = end_date.strftime("%Y-%m-%d")

        df_orders = pd.DataFrame(orders)
        df_sales = pd.DataFrame(sales)
        df_fin = pd.DataFrame(report_data)

        def determine_period_type(date_from, date_to):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
            start_dt = dt.strptime(date_from, "%Y-%m-%d")
            end_dt = dt.strptime(date_to, "%Y-%m-%d")
            
            days_diff = (end_dt - start_dt).days
            
            if days_diff == 0:
                # –î–µ–Ω—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—é
                period_start = start_dt - timedelta(days=6)
                period_end = start_dt + timedelta(days=6)
                period_type = "–¥–µ–Ω—å"
            elif days_diff <= 7:
                # –ù–µ–¥–µ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—è—Ü
                period_start = start_dt - timedelta(days=30)
                period_end = end_dt + timedelta(days=30)
                period_type = "–Ω–µ–¥–µ–ª—è"
            elif days_diff <= 31:
                # –ú–µ—Å—è—Ü - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª
                period_start = start_dt - timedelta(days=90)
                period_end = end_dt + timedelta(days=90)
                period_type = "–º–µ—Å—è—Ü"
            else:
                # –ì–æ–¥ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–¥
                period_start = start_dt - timedelta(days=365)
                period_end = end_dt + timedelta(days=365)
                period_type = "–≥–æ–¥"
            
            return period_start.strftime("%Y-%m-%d"), period_end.strftime("%Y-%m-%d"), period_type

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        extended_date_from, extended_date_to, period_type = determine_period_type(DATE_FROM, DATE_TO)

        # day‚Äë—Å—Ç–æ–ª–±–µ—Ü
        if not df_orders.empty:
            df_orders["day"] = pd.to_datetime(df_orders["date"]).dt.date
        else:
            df_orders["day"] = pd.to_datetime("2025-01-01").date()
            
        if not df_sales.empty:
            df_sales["day"] = pd.to_datetime(df_sales["date"]).dt.date
        else:
            df_sales["day"] = pd.to_datetime("2025-01-01").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è rr_dt –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not df_fin.empty:
            if "rr_dt" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["rr_dt"]).dt.date
            elif "date" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["date"]).dt.date
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è –¥–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü day
                df_fin["day"] = pd.to_datetime("2025-01-01").date()
        else:
            df_fin["day"] = pd.to_datetime("2025-01-01").date()

        # 4.1 Orders
        if not df_orders.empty:
            grp_orders = (
                df_orders.groupby("day")
                        .agg(
                            order_sum = ("priceWithDisc", "sum"),
                            ordered_qty = ("srid", "size"),
                            orders_cnt = ("srid", "nunique")
                        )
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_orders = pd.DataFrame(columns=['order_sum', 'ordered_qty', 'orders_cnt'])

        # 4.2 Sales (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏, –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç—ã)
        if not df_sales.empty:
            sales_mask = df_sales["saleID"].str.startswith("S", na=False)
            grp_sales = (
                df_sales[sales_mask]
                .groupby("day")
                .agg(
                    sales_sum = ("priceWithDisc", "sum"),
                    sold_qty = ("saleID", "size"),
                    for_pay = ("forPay", "sum")
                )
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_sales = pd.DataFrame(columns=['sales_sum', 'sold_qty', 'for_pay'])

        # 4.3 Finance ‚Äî logistica = —Ç–æ–ª—å–∫–æ delivery_rub
        if not df_fin.empty:
            grp_fin = (
                df_fin.groupby("day")
                    .agg(
                        delivery_cost = ("delivery_rub", "sum"),
                        storage = ("storage_fee", "sum"),
                        penalty = ("penalty", "sum"),
                        acceptance = ("acceptance", "sum"),
                        pay_for_goods = ("ppvz_for_pay", "sum")
                    )
                    .apply(pd.to_numeric, errors="coerce")
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_fin = pd.DataFrame(columns=['delivery_cost', 'storage', 'penalty', 'acceptance', 'pay_for_goods'])

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        all_daily = (
            grp_orders
            .join(grp_sales, how="outer")
            .join(grp_fin, how="outer")
            .fillna(0)
            .infer_objects(copy=False)
        )

        all_daily["buyout_pct"] = (
            all_daily["sold_qty"] / all_daily["ordered_qty"]
        ).fillna(0)

        all_daily["total_to_pay"] = (
            all_daily["pay_for_goods"]
            - all_daily[["delivery_cost", "storage", "penalty", "acceptance"]].sum(axis=1)
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        current_start = start_date.date()
        current_end = end_date.date()
        daily = all_daily[(all_daily.index >= current_start) & (all_daily.index <= current_end)]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–µ—Ä–∏–æ–¥: {current_start} - {current_end}")
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ all_daily: {len(all_daily)}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π –≤ daily –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(daily)}")
        if not daily.empty:
            logger.info(f"–ò–Ω–¥–µ–∫—Å—ã daily: {daily.index.tolist()}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∏ —à—Ç—Ä–∞—Ñ—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date)
            .filter(Advertisement.date <= end_date)
        )

        stops = sum(
            i.amount for i in session.query(Penalty)
            .filter(Penalty.shop_id == shop_id)
            .filter(Penalty.date >= start_date)
            .filter(Penalty.date <= end_date)
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        tax_setting = session.query(TaxSystemSetting).filter(TaxSystemSetting.shop_id == shop_id).first()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
        revenue = daily["sales_sum"].sum()
        if tax_setting:
            if tax_setting.tax_system == TaxSystemType.USN_6:
                tax_rate = 0.06
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                tax_rate = 0.0
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                tax_rate = tax_setting.custom_percent / 100
                print("tax_rate = ", tax_rate)
            else:
                tax_rate = 0.0
                print("–ø–æ—à–ª–æ –≤ else")
        else:
            tax_rate = 0.0
            
        tax = revenue * tax_rate
        
        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–∫–∞–∫ –≤ analytics.py)
        cost_of_goods = 0
        articles = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        for item in report_data:
            if not isinstance(item, dict):
                continue
            article = item.get("nm_id")
            quantity = item.get("quantity", 0)
            if article and quantity:
                if article not in articles:
                    articles[article] = 0
                articles[article] += quantity

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        for article, quantity in articles.items():
            try:
                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                product_cost = (
                    session.query(ProductCost)
                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                    .first()
                )
                if product_cost:
                    cost_of_goods += product_cost.cost * quantity
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ –≤ Test.py
        monthly_data = {
            "–ó–∞–∫–∞–∑—ã": daily["order_sum"].sum(),
            "–í—ã–∫—É–ø—ã": daily["sales_sum"].sum(),
            "–ö–æ–º–∏—Å—Å–∏—è": daily["pay_for_goods"].sum(),
            "–°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å": cost_of_goods,  # –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
            "–ù–∞–ª–æ–≥": tax,
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": daily["delivery_cost"].sum(),
            "–•—Ä–∞–Ω–µ–Ω–∏–µ": daily["storage"].sum(),
            "–®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": daily["penalty"].sum() + stops,
            "–†–µ–∫–ª–∞–º–∞": advert,
            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é": daily["sales_sum"].sum() - daily["pay_for_goods"].sum() - daily["delivery_cost"].sum() - daily["storage"].sum() - (daily["penalty"].sum() + stops) - advert - cost_of_goods,
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": daily["sales_sum"].sum() - daily["pay_for_goods"].sum() - daily[["delivery_cost", "storage", "penalty"]].sum().sum() - advert - tax - cost_of_goods
        }

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
        if period_type == "–¥–µ–Ω—å":
            # –î–ª—è –¥–Ω—è - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            prev_start = current_start - timedelta(days=1)
            prev_end = prev_start
            period_days = 1
        elif period_type == "–Ω–µ–¥–µ–ª—è":
            # –î–ª—è –Ω–µ–¥–µ–ª–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
            prev_start = current_start - timedelta(days=7)
            prev_end = current_start - timedelta(days=1)
            period_days = 7
        elif period_type == "–º–µ—Å—è—Ü":
            # –î–ª—è –º–µ—Å—è—Ü–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            prev_start = current_start - timedelta(days=30)
            prev_end = current_start - timedelta(days=1)
            period_days = 30
        else:  # –≥–æ–¥
            # –î–ª—è –≥–æ–¥–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥
            prev_start = current_start - timedelta(days=365)
            prev_end = current_start - timedelta(days=1)
            period_days = 365

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_daily = all_daily[(all_daily.index >= prev_start) & (all_daily.index <= prev_end)]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_revenue = prev_daily["sales_sum"].sum()
        prev_tax = prev_revenue * tax_rate

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date - timedelta(days=period_days))
            .filter(Advertisement.date < start_date)
            .all()
        )

        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–∫–∞–∫ –≤ analytics.py)
        prev_cost_of_goods = 0
        prev_articles = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        for item in report_data:
            if not isinstance(item, dict):
                continue
            article = item.get("nm_id")
            quantity = item.get("quantity", 0)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª –ø—Ä–æ–¥–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
            item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d").date()
            if prev_start <= item_date <= prev_end and article and quantity:
                if article not in prev_articles:
                    prev_articles[article] = 0
                prev_articles[article] += quantity

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        for article, quantity in prev_articles.items():
            try:
                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                product_cost = (
                    session.query(ProductCost)
                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                    .first()
                )
                if product_cost:
                    prev_cost_of_goods += product_cost.cost * quantity
            except:
                pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_monthly_data = {
            "–ó–∞–∫–∞–∑—ã": prev_daily["order_sum"].sum(),
            "–í—ã–∫—É–ø—ã": prev_daily["sales_sum"].sum(),
            "–ö–æ–º–∏—Å—Å–∏—è": prev_daily["pay_for_goods"].sum(),
            "–°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å": prev_cost_of_goods,  # –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
            "–ù–∞–ª–æ–≥": prev_tax,
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": prev_daily["delivery_cost"].sum(),
            "–•—Ä–∞–Ω–µ–Ω–∏–µ": prev_daily["storage"].sum(),
            "–®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": prev_daily["penalty"].sum(),
            "–†–µ–∫–ª–∞–º–∞": prev_advert,
            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é": prev_daily["sales_sum"].sum() - prev_daily["pay_for_goods"].sum() - prev_daily["delivery_cost"].sum() - prev_daily["storage"].sum() - prev_daily["penalty"].sum() - prev_advert - prev_cost_of_goods,
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": prev_daily["sales_sum"].sum() - prev_daily["pay_for_goods"].sum() - prev_daily[["delivery_cost", "storage", "penalty"]].sum().sum() - prev_tax - prev_advert - prev_cost_of_goods
        }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        def calculate_relative_change(current, previous):
            if previous == 0:
                return 0
            return (current - previous) / previous

        relative_changes = {}
        for metric in monthly_data.keys():
            relative_changes[metric] = calculate_relative_change(
                monthly_data[metric], 
                prev_monthly_data[metric]
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if not report_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        def determine_template_path(period_type):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞."""
            if period_type == "–≥–æ–¥":
                return "pnl_template_year.xlsx"
            else:
                return "pnl_template.xlsx"

        template_path = determine_template_path(period_type)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        try:
            wb = load_workbook(template_path)
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        ws = wb.active

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        def calculate_cost_for_day(day_date, report_data):
            day_cost = 0
            day_articles = {}
            
            for item in report_data:
                if not isinstance(item, dict):
                    continue
                article = item.get("nm_id")
                quantity = item.get("quantity", 0)
                item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d").date()
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ day_date —Ç–æ–∂–µ —è–≤–ª—è–µ—Ç—Å—è date –æ–±—ä–µ–∫—Ç–æ–º
                if isinstance(day_date, datetime):
                    day_date = day_date.date()
                
                if item_date == day_date and article and quantity:
                    if article not in day_articles:
                        day_articles[article] = 0
                    day_articles[article] += quantity
            
            for article, quantity in day_articles.items():
                try:
                    supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                    product_cost = (
                        session.query(ProductCost)
                        .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                        .first()
                    )
                    if product_cost:
                        day_cost += product_cost.cost * quantity
                except:
                    pass
            
            return day_cost

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü
        def calculate_cost_for_month(month_num, year, report_data):
            month_cost = 0
            month_articles = {}
            
            month_start = datetime(year, month_num, 1)
            if month_num == 12:
                month_end = datetime(year + 1, 1, 1) - timedelta(days=1)
            else:
                month_end = datetime(year, month_num + 1, 1) - timedelta(days=1)
            
            for item in report_data:
                if not isinstance(item, dict):
                    continue
                article = item.get("nm_id")
                quantity = item.get("quantity", 0)
                item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d")
                
                if month_start <= item_date <= month_end and article and quantity:
                    if article not in month_articles:
                        month_articles[article] = 0
                    month_articles[article] += quantity
            
            for article, quantity in month_articles.items():
                try:
                    supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                    product_cost = (
                        session.query(ProductCost)
                        .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                        .first()
                    )
                    if product_cost:
                        month_cost += product_cost.cost * quantity
                except:
                    pass
            
            return month_cost

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü C (—Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏)
        row_mapping = {
            "–ó–∞–∫–∞–∑—ã": 3,
            "–í—ã–∫—É–ø—ã": 4,
            "–ö–æ–º–∏—Å—Å–∏—è": 5,
            "–°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å": 6,
            "–ù–∞–ª–æ–≥": 7,
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": 8,
            "–•—Ä–∞–Ω–µ–Ω–∏–µ": 9,
            "–®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": 10,
            "–†–µ–∫–ª–∞–º–∞": 11,
            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é": 12,
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": 13
        }

        for metric, value in monthly_data.items():
            row = row_mapping.get(metric)
            if row:
                ws[f"C{row}"] = value

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü E (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        for metric, change in relative_changes.items():
            row = row_mapping.get(metric)
            if row:
                ws[f"E{row}"] = change

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã F-AJ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        if period_type == "–¥–µ–Ω—å":
            # –î–ª—è –¥–Ω—è - –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã F-AJ
            pass
        elif period_type == "–Ω–µ–¥–µ–ª—è":
            # –î–ª—è –Ω–µ–¥–µ–ª–∏ - –∑–∞–ø–æ–ª–Ω—è–µ–º F-L –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            weekdays = ['F', 'G', 'H', 'I', 'J', 'K', 'L']
            for i, col in enumerate(weekdays):
                if i < len(daily):
                    day_data = daily.iloc[i] if i < len(daily) else pd.Series(0, index=daily.columns)
                    day_date = start_date + timedelta(days=i)
                    day_cost = calculate_cost_for_day(day_date, report_data)
                    
                    ws[f"{col}3"] = day_data.get("order_sum", 0)  # –ó–∞–∫–∞–∑—ã
                    ws[f"{col}4"] = day_data.get("sales_sum", 0)  # –í—ã–∫—É–ø—ã
                    ws[f"{col}5"] = day_data.get("pay_for_goods", 0)  # –ö–æ–º–∏—Å—Å–∏—è
                    ws[f"{col}6"] = day_cost  # –°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å
                    ws[f"{col}7"] = day_data.get("sales_sum", 0) * tax_rate  # –ù–∞–ª–æ–≥
                    ws[f"{col}8"] = day_data.get("delivery_cost", 0)  # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                    ws[f"{col}9"] = day_data.get("storage", 0)  # –•—Ä–∞–Ω–µ–Ω–∏–µ
                    ws[f"{col}10"] = day_data.get("penalty", 0)  # –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
                    day_advert = sum(
                        i.amount for i in session.query(Advertisement)
                        .filter(Advertisement.shop_id == shop_id)
                        .filter(Advertisement.date == day_date)
                        .all()
                    )
                    ws[f"{col}11"] = day_advert  # –†–µ–∫–ª–∞–º–∞
                    ws[f"{col}12"] = day_data.get("sales_sum", 0) - day_data.get("pay_for_goods", 0) - day_data.get("delivery_cost", 0) - day_data.get("storage", 0) - day_data.get("penalty", 0) - day_advert - day_cost  # –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é
                    ws[f"{col}13"] = day_data.get("sales_sum", 0) - day_data.get("pay_for_goods", 0) - day_data.get("delivery_cost", 0) - day_data.get("storage", 0) - day_data.get("penalty", 0) - (day_data.get("sales_sum", 0) * tax_rate) - day_advert - day_cost  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        elif period_type == "–º–µ—Å—è—Ü":
            # –î–ª—è –º–µ—Å—è—Ü–∞ - –∑–∞–ø–æ–ª–Ω—è–µ–º F-AJ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
            columns = ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                       'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ']
            
            for day_num in range(1, 32):
                if day_num <= len(columns):
                    col_letter = columns[day_num - 1]
                    day_date = current_start.replace(day=day_num)
                    if day_date in daily.index:
                        day_data = daily.loc[day_date]
                    else:
                        day_data = pd.Series(0, index=daily.columns)
                    
                    day_cost = calculate_cost_for_day(day_date, report_data)
                    
                    ws[f"{col_letter}3"] = day_data.get("order_sum", 0)  # –ó–∞–∫–∞–∑—ã
                    ws[f"{col_letter}4"] = day_data.get("sales_sum", 0)  # –í—ã–∫—É–ø—ã
                    ws[f"{col_letter}5"] = day_data.get("pay_for_goods", 0)  # –ö–æ–º–∏—Å—Å–∏—è
                    ws[f"{col_letter}6"] = day_cost  # –°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å
                    ws[f"{col_letter}7"] = day_data.get("sales_sum", 0) * tax_rate  # –ù–∞–ª–æ–≥
                    ws[f"{col_letter}8"] = day_data.get("delivery_cost", 0)  # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                    ws[f"{col_letter}9"] = day_data.get("storage", 0)  # –•—Ä–∞–Ω–µ–Ω–∏–µ
                    ws[f"{col_letter}10"] = day_data.get("penalty", 0)  # –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
                    day_advert = sum(
                        i.amount for i in session.query(Advertisement)
                        .filter(Advertisement.shop_id == shop_id)
                        .filter(Advertisement.date == day_date)
                        .all()
                    )
                    ws[f"{col_letter}11"] = day_advert  # –†–µ–∫–ª–∞–º–∞
                    ws[f"{col_letter}12"] = day_data.get("sales_sum", 0) - day_data.get("pay_for_goods", 0) - day_data.get("delivery_cost", 0) - day_data.get("storage", 0) - day_data.get("penalty", 0) - day_advert - day_cost  # –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é
                    ws[f"{col_letter}13"] = day_data.get("sales_sum", 0) - day_data.get("pay_for_goods", 0) - day_data.get("delivery_cost", 0) - day_data.get("storage", 0) - day_data.get("penalty", 0) - (day_data.get("sales_sum", 0) * tax_rate) - day_advert - day_cost  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        elif period_type == "–≥–æ–¥":
            # –î–ª—è –≥–æ–¥–∞ - –∑–∞–ø–æ–ª–Ω—è–µ–º F-Q –ø–æ –º–µ—Å—è—Ü–∞–º
            months = ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            daily_copy = daily.copy()
            daily_copy.index = pd.to_datetime(daily_copy.index)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_month = dt.now().month
            current_year = dt.now().year
            
            for month_num in range(1, 13):
                if month_num <= current_month:  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    col_letter = months[month_num - 1]
                    month_data = daily_copy[daily_copy.index.month == month_num]
                    
                    if not month_data.empty:
                        month_sum = month_data.sum()
                        month_cost = calculate_cost_for_month(month_num, current_year, report_data)
                        
                        ws[f"{col_letter}3"] = month_sum.get("order_sum", 0)  # –ó–∞–∫–∞–∑—ã
                        ws[f"{col_letter}4"] = month_sum.get("sales_sum", 0)  # –í—ã–∫—É–ø—ã
                        ws[f"{col_letter}5"] = month_sum.get("pay_for_goods", 0)  # –ö–æ–º–∏—Å—Å–∏—è
                        ws[f"{col_letter}6"] = month_cost  # –°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å
                        ws[f"{col_letter}7"] = month_sum.get("sales_sum", 0) * tax_rate  # –ù–∞–ª–æ–≥
                        ws[f"{col_letter}8"] = month_sum.get("delivery_cost", 0)  # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                        ws[f"{col_letter}9"] = month_sum.get("storage", 0)  # –•—Ä–∞–Ω–µ–Ω–∏–µ
                        ws[f"{col_letter}10"] = month_sum.get("penalty", 0)  # –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
                        month_start = datetime(current_year, month_num, 1)
                        month_end = datetime(current_year, month_num, 1) + relativedelta(months=1) - timedelta(days=1)
                        month_advert = sum(
                            i.amount for i in session.query(Advertisement)
                            .filter(Advertisement.shop_id == shop_id)
                            .filter(Advertisement.date >= month_start)
                            .filter(Advertisement.date <= month_end)
                            .all()
                        )
                        ws[f"{col_letter}11"] = month_advert  # –†–µ–∫–ª–∞–º–∞
                        ws[f"{col_letter}12"] = month_sum.get("sales_sum", 0) - month_sum.get("pay_for_goods", 0) - month_sum.get("delivery_cost", 0) - month_sum.get("storage", 0) - month_sum.get("penalty", 0) - month_advert - month_cost  # –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é
                        ws[f"{col_letter}13"] = month_sum.get("sales_sum", 0) - month_sum.get("pay_for_goods", 0) - month_sum.get("delivery_cost", 0) - month_sum.get("storage", 0) - month_sum.get("penalty", 0) - (month_sum.get("sales_sum", 0) * tax_rate) - month_advert - month_cost  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å

        return wb
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNL –æ—Ç—á–µ—Ç–∞: {e}")
        return None
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
async def select_pnl_period_callback(callback: types.CallbackQuery, state: FSMContext):
    period_type = callback.data.split('_')[1]  # day, week, month, year
    await callback.message.edit_text(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º –ø–æ–¥—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö... (–∏–Ω–æ–≥–¥–∞ –¥–æ–ª—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2—Ö –º–∏–Ω—É—Ç)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.utcnow()
    if period_type == "week":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        start_week = now - timedelta(days=now.isoweekday() - 1)
        start_date = datetime(start_week.year, start_week.month, start_week.day)
        end_date = now
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period_type == "month":
        start_date = datetime(now.year, now.month, 1)
        end_date = now
        period_name = "–º–µ—Å—è—Ü"
    elif period_type == "year":
        start_date = datetime(now.year, 1, 1)
        end_date = now
        period_name = "–≥–æ–¥"
    else:  # day
        start_date = now - timedelta(days=1)
        end_date = now
        period_name = "–¥–µ–Ω—å"
    
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        shop_api_token = data['shop']['api_token']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text(
        f"üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNL –æ—Ç—á–µ—Ç–∞</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        f"–ü–µ—Ä–∏–æ–¥: –∑–∞ {period_name}\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
    wb = await generate_pnl_excel_report(shop_id, shop_api_token, start_date, end_date, shop_name)
    
    if not wb:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "3. –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ pnl_template.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    safe_shop_name = "".join(c for c in shop_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    filename = f"pnl_{safe_shop_name}_{datetime.now().strftime('%Y%m%d%H%M')}.xlsx"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = InputFile(file_stream, filename=filename)
    await callback.message.answer_document(
        file,
        caption=f"üìä PNL –æ—Ç—á–µ—Ç –∑–∞ {period_name}\n–ú–∞–≥–∞–∑–∏–Ω: {shop_name}"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é PNL
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pnl"))
    await callback.message.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup=keyboard)

def register_pnl_handlers(dp):
    dp.register_callback_query_handler(pnl_callback, text="pnl", state="*")
    dp.register_callback_query_handler(
        select_pnl_period_callback, 
        lambda c: c.data.startswith("pnlperiod_"), 
        state=PNLStates.waiting_for_period
    )