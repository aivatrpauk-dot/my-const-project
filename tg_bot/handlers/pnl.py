#PNL –û—à–∏–±–∫–∞
import logging
import asyncio
import openpyxl
import pandas as pd
from openpyxl import load_workbook
import io
from datetime import datetime, timedelta, datetime as dt
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from tg_bot.models import sessionmaker, engine
from tg_bot.models import Shop, Advertisement, Penalty
from tg_bot.models import (
    TaxSystemType, TaxSystemSetting,
    ProductCost, RegularExpense, OneTimeExpense
)
from tg_bot.keyboards.pnl_menu import pnl_period_keyboard
from tg_bot.services.wb_api import fetch_full_report, fetch_report_detail_by_period
from tg_bot.states.pnl_states import PNLStates
from dateutil.relativedelta import relativedelta
from tg_bot.models import Order

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é P&L
async def pnl_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if 'shop' not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
    
    keyboard = pnl_period_keyboard()
    await callback.message.answer(
        "üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ (P&L)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await PNLStates.waiting_for_period.set()

async def generate_pnl_excel_report(shop_id: int, shop_api_token: str, start_date: datetime, end_date: datetime, shop_name: str, full_data=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ PNL"""

    session = sessionmaker()(bind=engine)
    try:
        
        # –ï—Å–ª–∏ full_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ API
        if full_data is None:
            logger.info("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API...")
            full_data = await fetch_full_report(shop_api_token, start_date, end_date, shop_id)
            if not full_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
                return None
    
        report_data = full_data['finance']
        orders = full_data['orders']
        sales = full_data['sales']
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        logger.info(f"  - Finance –∑–∞–ø–∏—Å–µ–π: {len(report_data)}")
        logger.info(f"  - Orders –∑–∞–ø–∏—Å–µ–π: {len(orders)}")
        logger.info(f"  - Sales –∑–∞–ø–∏—Å–µ–π: {len(sales)}")
        
        if report_data:
            sample_finance = report_data[0]
            logger.info(f"  - –ü—Ä–∏–º–µ—Ä finance –∑–∞–ø–∏—Å–∏: {sample_finance}")
        
        if orders:
            sample_order = orders[0]
            logger.info(f"  - –ü—Ä–∏–º–µ—Ä order –∑–∞–ø–∏—Å–∏: {sample_order}")
            
        if sales:
            sample_sale = sales[0]
            logger.info(f"  - –ü—Ä–∏–º–µ—Ä sale –∑–∞–ø–∏—Å–∏: {sample_sale}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        DATE_FROM = start_date.strftime("%Y-%m-%d")
        DATE_TO = end_date.strftime("%Y-%m-%d")

        df_orders = pd.DataFrame(orders)
        df_sales = pd.DataFrame(sales)
        df_fin = pd.DataFrame(report_data)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DataFrame
        logger.info(f"DataFrame –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        logger.info(f"  - df_orders: {len(df_orders)} —Å—Ç—Ä–æ–∫, –∫–æ–ª–æ–Ω–∫–∏: {list(df_orders.columns) if not df_orders.empty else '–ø—É—Å—Ç–æ–π'}")
        logger.info(f"  - df_sales: {len(df_sales)} —Å—Ç—Ä–æ–∫, –∫–æ–ª–æ–Ω–∫–∏: {list(df_sales.columns) if not df_sales.empty else '–ø—É—Å—Ç–æ–π'}")
        logger.info(f"  - df_fin: {len(df_fin)} —Å—Ç—Ä–æ–∫, –∫–æ–ª–æ–Ω–∫–∏: {list(df_fin.columns) if not df_fin.empty else '–ø—É—Å—Ç–æ–π'}")

        def determine_period_type(date_from, date_to):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
            start_dt = dt.strptime(date_from, "%Y-%m-%d")
            end_dt = dt.strptime(date_to, "%Y-%m-%d")
            
            days_diff = (end_dt - start_dt).days
            
            if days_diff == 0:
                # –î–µ–Ω—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—é
                period_start = start_dt - timedelta(days=6)
                period_end = start_dt + timedelta(days=6)
                period_type = "–¥–µ–Ω—å"
            elif days_diff <= 7:
                # –ù–µ–¥–µ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—è—Ü
                period_start = start_dt - timedelta(days=30)
                period_end = end_dt + timedelta(days=30)
                period_type = "–Ω–µ–¥–µ–ª—è"
            elif days_diff <= 31:
                # –ú–µ—Å—è—Ü - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª
                period_start = start_dt - timedelta(days=90)
                period_end = end_dt + timedelta(days=90)
                period_type = "–º–µ—Å—è—Ü"
            else:
                # –ì–æ–¥ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–¥
                period_start = start_dt - timedelta(days=365)
                period_end = end_dt + timedelta(days=365)
                period_type = "–≥–æ–¥"
            
            return period_start.strftime("%Y-%m-%d"), period_end.strftime("%Y-%m-%d"), period_type

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        extended_date_from, extended_date_to, period_type = determine_period_type(DATE_FROM, DATE_TO)

        # day‚Äë—Å—Ç–æ–ª–±–µ—Ü
        if not df_orders.empty:
            df_orders["day"] = pd.to_datetime(df_orders["date"]).dt.date
        else:
            df_orders["day"] = pd.to_datetime("2025-01-01").date()
            
        if not df_sales.empty:
            df_sales["day"] = pd.to_datetime(df_sales["date"]).dt.date
        else:
            df_sales["day"] = pd.to_datetime("2025-01-01").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è rr_dt –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not df_fin.empty:
            if "rr_dt" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["rr_dt"]).dt.date
            elif "date" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["date"]).dt.date
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è –¥–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü day
                df_fin["day"] = pd.to_datetime("2025-01-01").date()
        else:
            df_fin["day"] = pd.to_datetime("2025-01-01").date()

        # 4.1 Orders
        if not df_orders.empty:
            grp_orders = (
                df_orders.groupby("day")
                        .agg(
                            order_sum = ("priceWithDisc", "sum"),
                            ordered_qty = ("srid", "size"),
                            orders_cnt = ("srid", "nunique")
                        )
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_orders = pd.DataFrame(columns=['order_sum', 'ordered_qty', 'orders_cnt'])

        # 4.2 Sales (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏, –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç—ã)
        if not df_sales.empty:
            sales_mask = df_sales["saleID"].str.startswith("S", na=False)
            grp_sales = (
                df_sales[sales_mask]
                .groupby("day")
                .agg(
                    sales_sum = ("priceWithDisc", "sum"),
                    sold_qty = ("saleID", "size"),
                    for_pay = ("forPay", "sum")
                )
            )
            
            # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ sales –¥–∞–Ω–Ω—ã—Ö
            returns_mask = df_sales["saleID"].str.startswith("R", na=False)
            if returns_mask.any():
                df_returns_sales = df_sales[returns_mask]
                df_returns_sales["day"] = pd.to_datetime(df_returns_sales["date"]).dt.date
                grp_returns_sales = (
                    df_returns_sales.groupby("day")
                    .agg(
                        returns_sum_sales = ("priceWithDisc", "sum"),
                        returns_qty_sales = ("saleID", "size")
                    )
                )
            else:
                grp_returns_sales = pd.DataFrame(columns=['returns_sum_sales', 'returns_qty_sales'])
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_sales = pd.DataFrame(columns=['sales_sum', 'sold_qty', 'for_pay'])
            grp_returns_sales = pd.DataFrame(columns=['returns_sum_sales', 'returns_qty_sales'])

        # 4.3 Finance ‚Äî —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤
        if not df_fin.empty:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            current_start = start_date.date()
            current_end = end_date.date()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —à—Ç—Ä–∞—Ñ—ã –∏–∑ finance –¥–∞–Ω–Ω—ã—Ö
            returns_data = []
            deductions_data = []
            penalties_data = []
            
            for item in report_data:
                if not isinstance(item, dict):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏
                item_date = None
                if "rr_dt" in item:
                    item_date = datetime.strptime(item["rr_dt"][:10], "%Y-%m-%d").date()
                elif "date" in item:
                    item_date = datetime.strptime(item["date"][:10], "%Y-%m-%d").date()
                
                if item_date and current_start <= item_date <= current_end:
                    doc_type = item.get("doc_type_name", "").lower()
                    
                    # –í–æ–∑–≤—Ä–∞—Ç—ã
                    if "–≤–æ–∑–≤—Ä–∞—Ç" in doc_type or "return" in doc_type:
                        returns_data.append({
                            "day": item_date,
                            "returns_sum": item.get("retail_price_withdisc_rub", 0) * item.get("quantity", 0),
                            "returns_qty": item.get("quantity", 0)
                        })
                    
                    # –ü—Ä–æ—á–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è (deduction)
                    if item.get("deduction", 0) != 0:
                        deductions_data.append({
                            "day": item_date,
                            "deduction": item.get("deduction", 0)
                        })
                    
                    # –®—Ç—Ä–∞—Ñ—ã (penalty + –¥—Ä—É–≥–∏–µ —à—Ç—Ä–∞—Ñ—ã)
                    penalty_amount = item.get("penalty", 0)
                    if penalty_amount != 0:
                        penalties_data.append({
                            "day": item_date,
                            "penalty": penalty_amount
                        })
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤
            df_returns = pd.DataFrame(returns_data)
            df_deductions = pd.DataFrame(deductions_data)
            df_penalties = pd.DataFrame(penalties_data)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            if not df_returns.empty:
                grp_returns = df_returns.groupby("day").agg({
                    "returns_sum": "sum",
                    "returns_qty": "sum"
                })
            else:
                grp_returns = pd.DataFrame(columns=['returns_sum', 'returns_qty'])
            
            if not df_deductions.empty:
                grp_deductions = df_deductions.groupby("day").agg({
                    "deduction": "sum"
                }).rename(columns={"deduction": "additional_deductions"})
            else:
                grp_deductions = pd.DataFrame(columns=['additional_deductions'])
            
            if not df_penalties.empty:
                grp_penalties = df_penalties.groupby("day").agg({
                    "penalty": "sum"
                }).rename(columns={"penalty": "additional_penalties"})
            else:
                grp_penalties = pd.DataFrame(columns=['additional_penalties'])
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ finance –¥–∞–Ω–Ω—ã—Ö
            grp_fin = (
                df_fin.groupby("day")
                    .agg(
                        delivery_cost = ("delivery_rub", "sum"),
                        storage = ("storage_fee", "sum"),
                        penalty = ("penalty", "sum"),
                        acceptance = ("acceptance", "sum"),
                        pay_for_goods = ("ppvz_for_pay", "sum"),
                        deduction = ("deduction", "sum")  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü deduction
                    )
                    .apply(pd.to_numeric, errors="coerce")
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_fin = pd.DataFrame(columns=['delivery_cost', 'storage', 'penalty', 'acceptance', 'pay_for_goods', 'deduction'])
            grp_returns = pd.DataFrame(columns=['returns_sum', 'returns_qty'])
            grp_deductions = pd.DataFrame(columns=['additional_deductions'])
            grp_penalties = pd.DataFrame(columns=['additional_penalties'])

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        all_daily = (
            grp_orders
            .join(grp_sales, how="outer")
            .join(grp_fin, how="outer")
            .join(grp_returns, how="outer")
            .join(grp_returns_sales, how="outer")
            .join(grp_deductions, how="outer")
            .join(grp_penalties, how="outer")
            .fillna(0)
            .infer_objects(copy=False)
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ finance –∏ sales
        all_daily["returns_sum"] = all_daily["returns_sum"] + all_daily["returns_sum_sales"]
        all_daily["returns_qty"] = all_daily["returns_qty"] + all_daily["returns_qty_sales"]

        all_daily["buyout_pct"] = (
            all_daily["sold_qty"] / all_daily["ordered_qty"]
        ).fillna(0)

        all_daily["total_to_pay"] = (
            all_daily["pay_for_goods"]
            - all_daily[["delivery_cost", "storage", "penalty", "acceptance"]].sum(axis=1)
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        current_start = start_date.date()
        current_end = end_date.date()
        daily = all_daily[(all_daily.index >= current_start) & (all_daily.index <= current_end)]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–µ—Ä–∏–æ–¥: {current_start} - {current_end}")
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ all_daily: {len(all_daily)}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π –≤ daily –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(daily)}")
        if not daily.empty:
            logger.info(f"–ò–Ω–¥–µ–∫—Å—ã daily: {daily.index.tolist()}")
        else:
            logger.info(f"–ò–Ω–¥–µ–∫—Å—ã all_daily: {all_daily.index.tolist() if not all_daily.empty else '–ü—É—Å—Ç–æ–π'}")
            logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ all_daily –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {current_start} - {current_end}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∏ —à—Ç—Ä–∞—Ñ—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date)
            .filter(Advertisement.date <= end_date)
        )

        stops = sum(
            i.amount for i in session.query(Penalty)
            .filter(Penalty.shop_id == shop_id)
            .filter(Penalty.date >= start_date.date())
            .filter(Penalty.date <= end_date.date())
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        tax_setting = session.query(TaxSystemSetting).filter(TaxSystemSetting.shop_id == shop_id).first()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
        revenue = daily["sales_sum"].sum()
        if tax_setting:
            if tax_setting.tax_system == TaxSystemType.USN_6:
                tax_rate = 0.06
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                tax_rate = 0.0
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                tax_rate = tax_setting.custom_percent / 100
                print("tax_rate = ", tax_rate)
            else:
                tax_rate = 0.0
                print("–ø–æ—à–ª–æ –≤ else")
        else:
            tax_rate = 0.0
            
        tax = revenue * tax_rate
        
        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–∫–∞–∫ –≤ analytics.py)
        cost_of_goods = 0
        articles = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        for item in report_data:
            if not isinstance(item, dict):
                continue
            article = item.get("nm_id")
            quantity = item.get("quantity", 0)
            if article and quantity:
                if article not in articles:
                    articles[article] = 0
                articles[article] += quantity

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        for article, quantity in articles.items():
            try:
                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                product_cost = (
                    session.query(ProductCost)
                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                    .first()
                )
                if product_cost:
                    cost_of_goods += product_cost.cost * quantity
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ –≤ Test.py
        monthly_data = {
            "–ó–∞–∫–∞–∑—ã": daily["order_sum"].sum(),
            "–í—ã–∫—É–ø—ã": daily["sales_sum"].sum(),
            "–ö–æ–º–∏—Å—Å–∏—è": daily["pay_for_goods"].sum(),
            "–°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å": cost_of_goods,  # –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
            "–ù–∞–ª–æ–≥": tax,
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": daily["delivery_cost"].sum(),
            "–•—Ä–∞–Ω–µ–Ω–∏–µ": daily["storage"].sum(),
            "–®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": daily["penalty"].sum() + stops,
            "–†–µ–∫–ª–∞–º–∞": advert,
            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é": daily["sales_sum"].sum() - daily["pay_for_goods"].sum() - daily["delivery_cost"].sum() - daily["storage"].sum() - (daily["penalty"].sum() + stops) - advert - cost_of_goods,
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": daily["sales_sum"].sum() - daily["pay_for_goods"].sum() - daily[["delivery_cost", "storage", "penalty"]].sum().sum() - advert - tax - cost_of_goods
        }

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
        if period_type == "–¥–µ–Ω—å":
            # –î–ª—è –¥–Ω—è - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            prev_start = current_start - timedelta(days=1)
            prev_end = prev_start
            period_days = 1
        elif period_type == "–Ω–µ–¥–µ–ª—è":
            # –î–ª—è –Ω–µ–¥–µ–ª–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
            prev_start = current_start - timedelta(days=7)
            prev_end = current_start - timedelta(days=1)
            period_days = 7
        elif period_type == "–º–µ—Å—è—Ü":
            # –î–ª—è –º–µ—Å—è—Ü–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            prev_start = current_start - timedelta(days=30)
            prev_end = current_start - timedelta(days=1)
            period_days = 30
        else:  # –≥–æ–¥
            # –î–ª—è –≥–æ–¥–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥
            prev_start = current_start - timedelta(days=365)
            prev_end = current_start - timedelta(days=1)
            period_days = 365

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_daily = all_daily[(all_daily.index >= prev_start) & (all_daily.index <= prev_end)]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_revenue = prev_daily["sales_sum"].sum()
        prev_tax = prev_revenue * tax_rate

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= (start_date - timedelta(days=period_days)).date())
            .filter(Advertisement.date < start_date.date())
            .all()
        )

        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–∫–∞–∫ –≤ analytics.py)
        prev_cost_of_goods = 0
        prev_articles = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        for item in report_data:
            if not isinstance(item, dict):
                continue
            article = item.get("nm_id")
            quantity = item.get("quantity", 0)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª –ø—Ä–æ–¥–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
            item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d").date()
            if prev_start <= item_date <= prev_end and article and quantity:
                if article not in prev_articles:
                    prev_articles[article] = 0
                prev_articles[article] += quantity

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        for article, quantity in prev_articles.items():
            try:
                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                product_cost = (
                    session.query(ProductCost)
                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                    .first()
                )
                if product_cost:
                    prev_cost_of_goods += product_cost.cost * quantity
            except:
                pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_monthly_data = {
            "–ó–∞–∫–∞–∑—ã": prev_daily["order_sum"].sum(),
            "–í—ã–∫—É–ø—ã": prev_daily["sales_sum"].sum(),
            "–ö–æ–º–∏—Å—Å–∏—è": prev_daily["pay_for_goods"].sum(),
            "–°–µ–±–µ—Å—Ç–æ–π–º–æ—Å—Ç—å": prev_cost_of_goods,  # –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
            "–ù–∞–ª–æ–≥": prev_tax,
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": prev_daily["delivery_cost"].sum(),
            "–•—Ä–∞–Ω–µ–Ω–∏–µ": prev_daily["storage"].sum(),
            "–®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": prev_daily["penalty"].sum(),
            "–†–µ–∫–ª–∞–º–∞": prev_advert,
            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é": prev_daily["sales_sum"].sum() - prev_daily["pay_for_goods"].sum() - prev_daily["delivery_cost"].sum() - prev_daily["storage"].sum() - prev_daily["penalty"].sum() - prev_advert - prev_cost_of_goods,
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": prev_daily["sales_sum"].sum() - prev_daily["pay_for_goods"].sum() - prev_daily[["delivery_cost", "storage", "penalty"]].sum().sum() - prev_tax - prev_advert - prev_cost_of_goods
        }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        def calculate_relative_change(current, previous):
            if previous == 0:
                return 0
            return (current - previous) / previous

        relative_changes = {}
        for metric in monthly_data.keys():
            relative_changes[metric] = calculate_relative_change(
                monthly_data[metric], 
                prev_monthly_data[metric]
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if not report_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        try:
            wb = load_workbook("pnl_template.xlsx")
        except FileNotFoundError:
            logger.error("–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ pnl_template.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        ws = wb.active

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        def calculate_cost_for_day(day_date, report_data):
            day_cost = 0
            day_articles = {}
            
            for item in report_data:
                if not isinstance(item, dict):
                    continue
                article = item.get("nm_id")
                quantity = item.get("quantity", 0)
                item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d").date()
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ day_date —Ç–æ–∂–µ —è–≤–ª—è–µ—Ç—Å—è date –æ–±—ä–µ–∫—Ç–æ–º
                if isinstance(day_date, datetime):
                    day_date = day_date.date()
                
                if item_date == day_date and article and quantity:
                    if article not in day_articles:
                        day_articles[article] = 0
                    day_articles[article] += quantity
            
            for article, quantity in day_articles.items():
                try:
                    supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                    product_cost = (
                        session.query(ProductCost)
                        .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                        .first()
                    )
                    if product_cost:
                        day_cost += product_cost.cost * quantity
                except:
                    pass
            
            return day_cost

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü
        def calculate_cost_for_month(month_num, year, report_data):
            month_cost = 0
            month_articles = {}
            
            month_start = datetime(year, month_num, 1)
            if month_num == 12:
                month_end = datetime(year + 1, 1, 1) - timedelta(days=1)
            else:
                month_end = datetime(year, month_num + 1, 1) - timedelta(days=1)
            
            for item in report_data:
                if not isinstance(item, dict):
                    continue
                article = item.get("nm_id")
                quantity = item.get("quantity", 0)
                item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d")
                
                if month_start <= item_date <= month_end and article and quantity:
                    if article not in month_articles:
                        month_articles[article] = 0
                    month_articles[article] += quantity
            
            for article, quantity in month_articles.items():
                try:
                    supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                    product_cost = (
                        session.query(ProductCost)
                        .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                        .first()
                    )
                    if product_cost:
                        month_cost += product_cost.cost * quantity
                except:
                    pass
            
            return month_cost

        # –ó–∞–ø–æ–ª–Ω—è–µ–º A1 - –ø–µ—Ä–∏–æ–¥
        period_text = f"{start_date.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')}"
        ws["A1"] = period_text

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        total_orders = daily["order_sum"].sum()
        total_sales = daily["sales_sum"].sum()
        total_cost = sum(calculate_cost_for_day(date, report_data) for date in daily.index)
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ WB
        # –ö–æ–º–∏—Å—Å–∏—è = ppvz_sales_commission + ppvz_vw + ppvz_vw_nds
        total_commission = sum(
            item.get("ppvz_sales_commission", 0) +
            item.get("ppvz_vw", 0) +
            item.get("ppvz_vw_nds", 0)
            for item in report_data
        )
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
        total_returns = daily["returns_sum"].sum()
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ sales –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        current_sales_returns = [sale for sale in sales if 
                               sale.get("saleID", "").startswith("R") and
                               start_date <= datetime.strptime(sale.get("date", "2025-01-01")[:10], "%Y-%m-%d") <= end_date]
        for sale in current_sales_returns:
            total_returns += sale.get("priceWithDisc", 0)
        total_advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date.date())
            .filter(Advertisement.date <= end_date.date())
            .all()
        )
        total_logistics = daily["delivery_cost"].sum()
        total_storage = daily["storage"].sum()
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—á–∏—Ö —É–¥–µ—Ä–∂–∞–Ω–∏–π
        total_deductions = daily["deduction"].sum() + daily["additional_deductions"].sum()
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —à—Ç—Ä–∞—Ñ–æ–≤ (–≤–∫–ª—é—á–∞—è —à—Ç—Ä–∞—Ñ—ã –∏–∑ –ë–î)
        total_penalties = daily["penalty"].sum() + daily["additional_penalties"].sum() + stops
        total_payout = total_sales - total_commission - total_logistics - total_storage - total_penalties - total_advert - total_cost
        total_tax = total_sales * tax_rate
        total_profit = total_sales - total_commission - total_logistics - total_storage - total_penalties - total_tax - total_advert - total_cost

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É 2 (–º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥)
        ws["B2"] = total_orders
        ws["C2"] = total_sales
        ws["D2"] = total_cost
        ws["E2"] = total_commission
        ws["F2"] = total_returns
        ws["G2"] = total_advert
        ws["H2"] = total_logistics
        ws["I2"] = total_storage
        ws["J2"] = total_deductions
        ws["K2"] = total_penalties
        ws["L2"] = total_payout
        ws["M2"] = total_tax
        ws["N2"] = total_profit

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ full_data –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –ø–µ—Ä–∏–æ–¥–∞ –≤ wb_api.py
        period_days = (end_date - start_date).days + 1
        prev_start_date = start_date - timedelta(days=period_days)
        prev_end_date = start_date - timedelta(days=1)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        def parse_date_safe(date_str, default='2025-01-01'):
            """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
            if not date_str:
                return datetime.strptime(default, '%Y-%m-%d')
            try:
                # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å (T21:48:39)
                date_only = date_str.split('T')[0] if 'T' in date_str else date_str
                return datetime.strptime(date_only, '%Y-%m-%d')
            except ValueError:
                return datetime.strptime(default, '%Y-%m-%d')
        
        prev_report_data = [item for item in report_data if 
                           prev_start_date <= parse_date_safe(item.get('rr_dt', item.get('date'))) <= prev_end_date]
        prev_orders = [order for order in orders if 
                      prev_start_date <= parse_date_safe(order.get('date')) <= prev_end_date]
        prev_sales = [sale for sale in sales if 
                     prev_start_date <= parse_date_safe(sale.get('date')) <= prev_end_date]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥
        prev_df_orders = pd.DataFrame(prev_orders)
        prev_df_sales = pd.DataFrame(prev_sales)
        prev_df_fin = pd.DataFrame(prev_report_data)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥
        prev_total_orders = prev_df_orders["priceWithDisc"].sum() if not prev_df_orders.empty else 0
        prev_total_sales = prev_df_sales["priceWithDisc"].sum() if not prev_df_sales.empty else 0
        prev_total_cost = sum(calculate_cost_for_day(date, prev_report_data) for date in pd.date_range(prev_start_date, prev_end_date))
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ WB –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_total_commission = sum(
            item.get("ppvz_sales_commission", 0) +
            item.get("ppvz_vw", 0) +
            item.get("ppvz_vw_nds", 0)
            for item in prev_report_data
        )
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_total_returns = 0
        for item in prev_report_data:
            if not isinstance(item, dict):
                continue
            doc_type = item.get("doc_type_name", "").lower()
            if "–≤–æ–∑–≤—Ä–∞—Ç" in doc_type or "return" in doc_type:
                prev_total_returns += item.get("retail_price_withdisc_rub", 0) * item.get("quantity", 0)
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ sales –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        prev_sales_returns = [sale for sale in prev_sales if sale.get("saleID", "").startswith("R")]
        for sale in prev_sales_returns:
            prev_total_returns += sale.get("priceWithDisc", 0)
        
        prev_total_advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= prev_start_date)
            .filter(Advertisement.date <= prev_end_date)
            .all()
        )
        prev_total_logistics = prev_df_fin["delivery_rub"].sum() if not prev_df_fin.empty else 0
        prev_total_storage = prev_df_fin["storage_fee"].sum() if not prev_df_fin.empty else 0
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_total_penalties = prev_df_fin["penalty"].sum() if not prev_df_fin.empty else 0
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—á–∏—Ö —É–¥–µ—Ä–∂–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_total_deductions = sum(item.get("deduction", 0) for item in prev_report_data)
        
        prev_total_tax = prev_total_sales * tax_rate
        prev_total_profit = prev_total_sales - prev_total_commission - prev_total_logistics - prev_total_storage - prev_total_penalties - prev_total_tax - prev_total_advert - prev_total_cost

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É 3 (—Ä–∞–∑–Ω–∏—Ü–∞ —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        values = [
            ("B4", total_orders - prev_total_orders),
            ("C4", total_sales - prev_total_sales),
            ("D4", total_cost - prev_total_cost),
            ("E4", total_commission - prev_total_commission),
            ("F4", total_returns - prev_total_returns),
            ("G4", total_advert - prev_total_advert),
            ("H4", total_logistics - prev_total_logistics),
            ("I4", total_storage - prev_total_storage),
            ("J4", total_deductions - prev_total_deductions),
            ("K4", total_penalties - prev_total_penalties),
            ("L4", total_payout - (prev_total_sales - prev_total_commission - prev_total_logistics - prev_total_storage - prev_total_penalties - prev_total_advert - prev_total_cost)),
            ("M4", total_tax - prev_total_tax),
            ("N4", total_profit - prev_total_profit)
        ]
        
        for cell_ref, value in values:
            cell = ws[cell_ref]
            original_format = cell.number_format  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            cell.value = value
            cell.number_format = original_format  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–Ω–µ–π –ø–µ—Ä–∏–æ–¥–∞
        date_range = pd.date_range(start=current_start, end=current_end, freq='D')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
        logger.info(f"–°–æ–∑–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {len(date_range)} –¥–Ω–µ–π —Å {current_start} –ø–æ {current_end}")
        logger.info(f"–î–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {[d.strftime('%Y-%m-%d') for d in date_range]}")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–∞—á–∏–Ω–∞—è —Å 5 —Å—Ç—Ä–æ–∫–∏
        row = 5
        for date in date_range:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pandas.Timestamp –≤ datetime.date –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            date_date = date.date()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if date_date in daily.index:
                day_data = daily.loc[date_date]
                logger.info(f"–î–µ–Ω—å {date.strftime('%Y-%m-%d')}: –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                day_data = pd.Series({
                    'order_sum': 0,
                    'sales_sum': 0,
                    'delivery_cost': 0,
                    'storage': 0,
                    'penalty': 0,
                    'returns_sum': 0,
                    'deduction': 0,
                    'additional_penalties': 0,
                    'additional_deductions': 0
                })
                logger.info(f"–î–µ–Ω—å {date.strftime('%Y-%m-%d')}: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏")
            
            day_cost = calculate_cost_for_day(date_date, report_data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∑–∞ –¥–µ–Ω—å
            day_advert = sum(
                i.amount for i in session.query(Advertisement)
                .filter(Advertisement.shop_id == shop_id)
                .filter(Advertisement.date == date_date)
                .all()
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
            day_orders = day_data.get("order_sum", 0)
            day_sales = day_data.get("sales_sum", 0)
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ WB –¥–ª—è –¥–Ω—è
            day_report_data = [item for item in report_data if 
                              parse_date_safe(item.get('rr_dt', item.get('date'))).date() == date_date]
            day_commission = sum(
                item.get("ppvz_sales_commission", 0) +
                item.get("ppvz_vw", 0) +
                item.get("ppvz_vw_nds", 0)
                for item in day_report_data
            )
            
            day_logistics = day_data.get("delivery_cost", 0)
            day_storage = day_data.get("storage", 0)
            day_penalties = day_data.get("penalty", 0)
            day_returns = day_data.get("returns_sum", 0)
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ sales –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            day_sales_returns = [sale for sale in sales if 
                               sale.get("saleID", "").startswith("R") and
                               datetime.strptime(sale.get("date", "2025-01-01")[:10], "%Y-%m-%d").date() == date_date]
            for sale in day_sales_returns:
                day_returns += sale.get("priceWithDisc", 0)
            day_deductions = day_data.get("deduction", 0)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ finance –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
            additional_penalties = day_data.get("additional_penalties", 0)
            additional_deductions = day_data.get("additional_deductions", 0)
            total_day_penalties = day_penalties + additional_penalties
            total_day_deductions = day_deductions + additional_deductions
            day_tax = day_sales * tax_rate
            day_profit = day_sales - day_commission - day_logistics - day_storage - total_day_penalties - day_tax - day_advert - day_cost
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
            ws[f"A{row}"] = date.strftime("%d.%m.%Y")  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
            ws[f"B{row}"] = day_orders
            ws[f"C{row}"] = day_sales
            ws[f"D{row}"] = day_cost
            ws[f"E{row}"] = day_commission
            ws[f"F{row}"] = day_returns
            ws[f"G{row}"] = day_advert
            ws[f"H{row}"] = day_logistics
            ws[f"I{row}"] = day_storage
            ws[f"J{row}"] = total_day_deductions
            ws[f"K{row}"] = total_day_penalties
            ws[f"L{row}"] = day_sales - day_commission - day_logistics - day_storage - total_day_penalties - day_advert - day_cost
            ws[f"M{row}"] = day_tax
            ws[f"N{row}"] = day_profit
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª—å —Å 5-–π —Å—Ç—Ä–æ–∫–∏ (—à–∞–±–ª–æ–Ω) –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            if row > 5:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
                for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N']:
                    source_cell = ws[f"{col}5"]
                    target_cell = ws[f"{col}{row}"]
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                    try:
                        if source_cell.font:
                            target_cell.font = source_cell.font.copy()
                        if source_cell.border:
                            target_cell.border = source_cell.border.copy()
                        if source_cell.fill:
                            target_cell.fill = source_cell.fill.copy()
                        if source_cell.number_format:
                            target_cell.number_format = source_cell.number_format
                        if source_cell.alignment:
                            target_cell.alignment = source_cell.alignment.copy()
                    except Exception as style_error:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è —è—á–µ–π–∫–∏ {col}{row}: {style_error}")
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        target_cell.number_format = '#,##0.00'
            
            row += 1

        logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: {row - 5} (—Å 5-–π –ø–æ {row-1}-—é —Å—Ç—Ä–æ–∫—É)")

        return wb
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNL –æ—Ç—á–µ—Ç–∞: {e}")
        return None
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
async def select_pnl_period_callback(callback: types.CallbackQuery, state: FSMContext):
    period_type = callback.data.split('_')[1]  # day, week, month, year
    await callback.message.edit_text(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º –ø–æ–¥—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö... (–∏–Ω–æ–≥–¥–∞ –¥–æ–ª—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2—Ö –º–∏–Ω—É—Ç)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.utcnow()
    if period_type == "week":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        start_week = now - timedelta(days=now.isoweekday() - 1)
        start_date = datetime(start_week.year, start_week.month, start_week.day)
        end_date = now
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period_type == "month":
        start_date = datetime(now.year, now.month, 1)
        end_date = now
        period_name = "–º–µ—Å—è—Ü"
    elif period_type == "year":
        start_date = datetime(now.year, 1, 1)
        end_date = now
        period_name = "–≥–æ–¥"
    else:  # day
        start_date = now - timedelta(days=1)
        end_date = now
        period_name = "–¥–µ–Ω—å"
    
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        shop_api_token = data['shop']['api_token']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text(
        f"üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNL –æ—Ç—á–µ—Ç–∞</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        f"–ü–µ—Ä–∏–æ–¥: –∑–∞ {period_name}\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
    wb = await generate_pnl_excel_report(shop_id, shop_api_token, start_date, end_date, shop_name)
    
    if not wb:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "3. –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ pnl_template.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    safe_shop_name = "".join(c for c in shop_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    filename = f"PNL.xlsx"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = InputFile(file_stream, filename=filename)
    await callback.message.answer_document(
        file,
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é PNL
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pnl"))
    await callback.message.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup=keyboard)

def register_pnl_handlers(dp):
    dp.register_callback_query_handler(pnl_callback, text="pnl", state="*")
    dp.register_callback_query_handler(
        select_pnl_period_callback, 
        lambda c: c.data.startswith("pnlperiod_"), 
        state=PNLStates.waiting_for_period
    )