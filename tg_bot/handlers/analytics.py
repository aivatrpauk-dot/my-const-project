from aiogram import types
import asyncio
from tg_bot.services.wb_api import fetch_report_detail_by_period
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.exceptions import MessageNotModified
from tg_bot.models import (
    Order,
    Shop,
    sessionmaker,
    engine,
    ProductCost,
    TaxSystemSetting,
    RegularExpense,
    TaxSystemType,
    OneTimeExpense,
    Advertisement,
    Penalty,
User,
    RegularExpenseFrequency
)
from tg_bot.states.analytics_states import AnalyticsStates
from tg_bot.keyboards.analytics_menu import (
    analytics_menu_keyboard,
    period_keyboard,
    period_keyboard2,
)
from tg_bot.services.wb_api import fetch_full_report
from dateutil.relativedelta import relativedelta
from datetime import datetime, timedelta, date
import math
import io
import logging
import openpyxl
import json
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from openpyxl import load_workbook
from tg_bot.handlers.pnl import generate_pnl_excel_report  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
import os
import pandas as pd
import numpy as np
from collections import defaultdict
from datetime import datetime as dt


logger = logging.getLogger(__name__)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async def analytics_callback(callback: types.CallbackQuery):
    text = (
        "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –Ω–∞ Wildberries. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    keyboard = analytics_menu_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
PROFITABILITY_LEVELS = [
    {
        "min": -float("inf"),
        "max": 20,
        "name": "‚ö†Ô∏è –ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "characteristics": "–ü–ª–æ—Ö–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å.",
        "reasons": "–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É/—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –Ω–∏–∑–∫–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏.",
        "conclusion": "–¢–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –Ω–µ–≤—ã–≥–æ–¥–µ–Ω, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–¥–µ–ª—å.",
        "recommendations": [
            "–°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å.",
            "–ò—â–∏—Ç–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–∞–π—Ç–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏.",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç—ã, —Ä–µ–∫–ª–∞–º–∞) –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö.",
            "–ï—Å–ª–∏ —Ä–æ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω ‚Äì —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —Å–º–µ–Ω—É –Ω–∏—à–∏.",
        ],
        "action": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É—Ö–æ–¥–∏—Ç—å",
    },
    {
        "min": 20,
        "max": 40,
        "name": "‚ö†Ô∏è –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
        "characteristics": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
        "reasons": "–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏.",
        "conclusion": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —É–π—Ç–∏ –≤ –Ω–æ–ª—å –∏–ª–∏ –º–∏–Ω—É—Å –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.",
        "recommendations": [
            "–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –º–∞—Ä–∂—É —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏, –¥–æ–ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥.",
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç.",
            "–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂.",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        ],
        "action": "–£–ª—É—á—à–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã",
    },
    {
        "min": 40,
        "max": 60,
        "name": "‚úÖ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "characteristics": "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
        "reasons": "–•–æ—Ä–æ—à–∏–π —Å–ø—Ä–æ—Å, –≥—Ä–∞–º–æ—Ç–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞—Ç—Ä–∞—Ç.",
        "conclusion": "–£—Å—Ç–æ–π—á–∏–≤—ã–π –±–∏–∑–Ω–µ—Å, –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å.",
        "recommendations": [
            "–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–µ—Ä–≤–∏—Å.",
            "–†–∞—Å—à–∏—Ä—è–π—Ç–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤ –Ω–∏—à–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞.",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ (–æ—Ç–∑—ã–≤—ã, —Ä–∞—Å—Å—ã–ª–∫–∏).",
            "–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–º–µ–∂–Ω—ã–µ –Ω–∏—à–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–æ–π.",
        ],
        "action": "–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏",
    },
    {
        "min": 60,
        "max": 100,
        "name": "üî• –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "characteristics": "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –±–∏–∑–Ω–µ—Å.",
        "reasons": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, –Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.",
        "conclusion": "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å—Ç–æ–∏—Ç –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤.",
        "recommendations": [
            "–ê–∫—Ç–∏–≤–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ: –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –∏–ª–∏ —Ä—ã–Ω–∫–∏.",
            "–£—Å–∏–ª–∏–≤–∞–π—Ç–µ –±—Ä–µ–Ω–¥ –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏.",
            "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –≤ –Ω–æ–≤—ã–µ –≤—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.",
        ],
        "action": "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å",
    },
    {
        "min": 100,
        "max": float("inf"),
        "name": "‚ú® –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        "characteristics": "–í—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å, —á–∞—Å—Ç–æ –Ω–∏—à–µ–≤—ã–π.",
        "reasons": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, VIP-—Å–µ–≥–º–µ–Ω—Ç, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä—è–º—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤.",
        "conclusion": "–†–µ–¥–∫–∏–π –∏ —Ü–µ–Ω–Ω—ã–π –∫–µ–π—Å, —Ç—Ä–µ–±—É–µ—Ç –∑–∞—â–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π.",
        "recommendations": [
            "–£–∫—Ä–µ–ø–ª—è–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏.",
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –¥–æ —Ç–æ—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–∏–±—ã–ª–∏ –∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        ],
        "action": "–£–∫—Ä–µ–ø–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –≤—ã–∂–∏–º–∞—Ç—å –≤—Å–µ —Å–æ–∫–∏",
    },
]


def get_profitability_level(profitability):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"""
    for level in PROFITABILITY_LEVELS:
        if level["min"] <= profitability < level["max"]:
            return level
    return PROFITABILITY_LEVELS[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å


async def profitability_estimation_callback(
    callback: types.CallbackQuery, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async with state.proxy() as data:
        data["analytics_type"] = "profitability"
        data["article_page"] = 0

    await show_articles_page(callback, state)


async def calculate_profitability_for_article(article, shop_id, api_token):
    """–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=30)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    report = await fetch_full_report(api_token, start_date, end_date)
    if not report:
        return None

    print("FLAG0")
    # for i in report:
    # print(i['nm_id'])
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
    article_data = [item for item in report if item.get("nm_id") == article]
    print("FLAG0.5")
    print(article_data)
    if not article_data:
        return None
    print("FLAG1")
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_quantity = sum(item.get("quantity", 0) for item in article_data)
    total_revenue = sum(
        item.get("retail_price_withdisc_rub", 0) for item in article_data
    )
    total_commission = -sum(
        item.get("ppvz_sales_commission", 0)
        + item.get("ppvz_vw", 0)
        + item.get("ppvz_vw_nds", 0)
        for item in article_data
    )
    print("FLAG2")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    total_logistics = sum(item.get("delivery_rub", 0) for item in report)
    total_storage = sum(item.get("storage_fee", 0) for item in report)
    total_revenue_all = sum(item.get("retail_price_withdisc_rub", 0) for item in report)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã—Ä—É—á–∫–µ
    logistics_share = (
        total_logistics * (total_revenue / total_revenue_all)
        if total_revenue_all
        else 0
    )
    storage_share = (
        total_storage * (total_revenue / total_revenue_all) if total_revenue_all else 0
    )
    print("FLAG3")
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    session = sessionmaker()(bind=engine)
    try:
        product_cost = (
            session.query(ProductCost)
            .filter(ProductCost.shop_id == shop_id, ProductCost.article == article)
            .first()
        )
        cost_per_item = product_cost.cost if product_cost else 0
    finally:
        session.close()

    total_cost = cost_per_item * total_quantity
    total_expenses = total_commission + logistics_share + storage_share + total_cost

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
    net_profit = total_revenue - total_expenses
    profitability = (net_profit / total_revenue) * 100 if total_revenue else 0

    return {
        "revenue": total_revenue,
        "cost": total_cost,
        "commission": total_commission,
        "logistics": logistics_share,
        "storage": storage_share,
        "expenses": total_expenses,
        "net_profit": net_profit,
        "profitability": profitability,
        "quantity": total_quantity,
        "cost_per_item": cost_per_item,
    }
def get_comm(comission, category):
    for cat in comission["report"]:
        if cat["parentName"] == category:
            return cat["paidStorageKgvp"]

async def show_profitability_report(
    callback: types.CallbackQuery, article, state: FSMContext
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
    async with state.proxy() as data:
        shop_id = data["shop"]["id"]
        shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data["shop"]["api_token"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text(
        f"üìä <b>–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        "–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—á–µ—Ç..."
    )

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    metrics = await calculate_profitability_for_article(article, shop_id, api_token)

    if not metrics:
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
            "2. –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞\n"
            "3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WB API"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    profitability = metrics["profitability"]
    level = get_profitability_level(profitability)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = (
        f"üìä <b>–û—Ü–µ–Ω–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {level['name']}</b>\n\n"
        f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {article}\n"
        f"<b>–ú–∞–≥–∞–∑–∏–Ω:</b> {shop_name}\n"
        f"<b>–ü–µ—Ä–∏–æ–¥:</b> –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
        "<u>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</u>\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {metrics['revenue']:.2f} —Ä—É–±.\n"
        f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {metrics['quantity']} —à—Ç.\n"
        f"üè∑Ô∏è –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {metrics['cost_per_item']:.2f} —Ä—É–±./—à—Ç. (–ò—Ç–æ–≥–æ: {metrics['cost']:.2f} —Ä—É–±.)\n"
        f"üìä –ö–æ–º–∏—Å—Å–∏–∏ WB: {metrics['commission']:.2f} —Ä—É–±.\n"
        f"üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {metrics['logistics']:.2f} —Ä—É–±.\n"
        f"üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {metrics['storage']:.2f} —Ä—É–±.\n"
        f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {metrics['net_profit']:.2f} —Ä—É–±.\n"
        f"üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: <b>{profitability:.1f}%</b>\n\n"
        f"<u>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:</u>\n{level['characteristics']}\n\n"
        f"<u>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</u>\n{level['reasons']}\n\n"
        f"<u>–í—ã–≤–æ–¥:</u>\n{level['conclusion']}\n\n"
        "<u>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</u>\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for i, recommendation in enumerate(level["recommendations"]):
        text += f"{i+1}. {recommendation}\n"

    text += f"\n<u>–î–µ–π—Å—Ç–≤–∏–µ:</u>\nüöÄ <b>{level['action']}</b>"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            "üîô –ö –≤—ã–±–æ—Ä—É –∞—Ä—Ç–∏–∫—É–ª–∞", callback_data="profitability_estimation"
        )
    )
    keyboard.add(InlineKeyboardButton("üìä –í –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="analytics"))

    await callback.message.edit_text(text, reply_markup=keyboard)


async def get_top_profitable_products(api_token: str, shop_id: int):
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=30)
    report = await fetch_full_report(api_token, start_date, end_date)
    if not report:
        return []

    session = sessionmaker()(bind=engine)
    try:
        products = {}

        for item in report:
            article = item.get("sa_name")
            if not article:
                continue

            quantity = item.get("quantity", 0)
            revenue = item.get("retail_price_withdisc_rub", 0) * quantity
            commission = (
                item.get("ppvz_sales_commission", 0)
                + item.get("ppvz_vw", 0)
                + item.get("ppvz_vw_nds", 0)
            )
            logistics = item.get("delivery_rub", 0) / len(report) * quantity + item.get("rebill_logistic_cost", 0) / len(report) * quantity
            storage = item.get("storage_fee", 0) / len(report) * quantity

            product_cost = (
                session.query(ProductCost)
                .filter(ProductCost.shop_id == shop_id, ProductCost.article == article)
                .first()
            )
            cost = product_cost.cost if product_cost else 0

            profit = revenue - (cost * quantity + commission + logistics + storage)

            if article not in products:
                products[article] = {
                    "revenue": 0,
                    "cost": cost,
                    "quantity": 0,
                    "profit": 0,
                }

            products[article]["revenue"] += revenue
            products[article]["quantity"] += quantity
            products[article]["profit"] += profit

        sorted_products = sorted(
            products.items(), key=lambda x: x[1]["profit"], reverse=True
        )

        return sorted_products[:5]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []
    finally:
        session.close()


async def top5_products_callback(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return

        shop_id = data["shop"]["id"]
        shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data["shop"]["api_token"]

    await callback.message.edit_text(
        "‚è≥ <b>–†–∞—Å—á–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        "–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—á–µ—Ç..."
    )

    top_products = await get_top_profitable_products(api_token, shop_id)

    if not top_products:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n"
            "1. –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "2. API-—Ç–æ–∫–µ–Ω WB –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
            "3. –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        )
        return

    text = (
        f"üèÜ <b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        "–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
    )

    for i, (article, data) in enumerate(top_products):
        profit = data["profit"]
        revenue = data["revenue"]
        quantity = data["quantity"]
        cost = data["cost"]

        text += (
            f"{i+1}. <b>{article}</b>\n"
            f"   –ü—Ä–∏–±—ã–ª—å: {profit:.2f} —Ä—É–±.\n"
            f"   –í—ã—Ä—É—á–∫–∞: {revenue:.2f} —Ä—É–±.\n"
            f"   –ü—Ä–æ–¥–∞–Ω–æ: {quantity} —à—Ç.\n"
            f"   –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} —Ä—É–±./—à—Ç.\n\n"
        )

    text += "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ–º–∏—Å—Å–∏–∏, –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ</i>"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics"))

    await callback.message.edit_text(text, reply_markup=keyboard)


async def what_if_simulator_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
        shop_id = data["shop"]["id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async with state.proxy() as data:
        data["analytics_type"] = "what_if"
        data["article_page"] = 0

    await show_articles_page(callback, state)


async def show_articles_page(callback: types.CallbackQuery, state: FSMContext):
    session = sessionmaker()(bind=engine)
    try:
        async with state.proxy() as data:
            shop_id = data["shop"]["id"]
            page = data["article_page"]
            analytics_type = data["analytics_type"]

        articles = (
            session.query(Order.nmId).filter(Order.shop_id == shop_id).distinct().all()
        )

        articles = [art[0] for art in articles]

        if not articles:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º", show_alert=True)
            return
        items_per_page = 7
        total_pages = math.ceil(len(articles) / items_per_page)
        start_idx = page * items_per_page
        page_articles = articles[start_idx : start_idx + items_per_page]

        title = (
            "üìä –û—Ü–µ–Ω–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"
            if analytics_type == "profitability"
            else "üîÆ –°–∏–º—É–ª—è—Ç–æ—Ä ¬´–ê —á—Ç–æ –µ—Å–ª–∏?¬ª"
        )
        text = f"{title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"

        keyboard = InlineKeyboardMarkup(row_width=1)

        for article in page_articles:
            keyboard.add(
                InlineKeyboardButton(article, callback_data=f"select_article_{article}")
            )

        pagination_row = []
        if page > 0:
            pagination_row.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_articles_page")
            )
        if start_idx + items_per_page < len(articles):
            pagination_row.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_articles_page")
            )

        if pagination_row:
            keyboard.row(*pagination_row)

        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_analytics"))
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=keyboard)
        await AnalyticsStates.waiting_for_article.set()
    finally:
        session.close()


async def handle_articles_pagination(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        page = data["article_page"]
        if callback.data == "prev_articles_page":
            data["article_page"] = max(0, page - 1)
        else:
            data["article_page"] = page + 1

    await show_articles_page(callback, state)


async def select_article_callback(callback: types.CallbackQuery, state: FSMContext):
    article = callback.data.split("_", 2)[2]

    async with state.proxy() as data:
        analytics_type = data["analytics_type"]
        shop_id = data["shop"]["id"]
        data["selected_article"] = article

    if analytics_type == "profitability":
        await show_profitability_report(callback, int(article), state)
    else:
        await callback.message.edit_text(
            "üîÆ <b>–°–∏–º—É–ª—è—Ç–æ—Ä ¬´–ê —á—Ç–æ –µ—Å–ª–∏?¬ª</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω –∞—Ä—Ç–∏–∫—É–ª: <b>{article}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏ –Ω–æ–≤—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–§–æ—Ä–º–∞—Ç: <code>—Ü–µ–Ω–∞, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1200, 800</code>"
        )
        await AnalyticsStates.waiting_for_price_and_cost.set()


async def what_if_simulator_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async with state.proxy() as data:
        data["analytics_type"] = "what_if"
        data["article_page"] = 0

    await show_articles_page(callback, state)


async def process_price_and_cost(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–≤–æ–¥
        input_text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        if "," in input_text:
            parts = input_text.split(",")
        else:
            parts = input_text.split()

        if len(parts) != 2:
            raise ValueError

        new_price = float(parts[0].strip())
        new_cost = float(parts[1].strip())

        async with state.proxy() as data:
            article = data["selected_article"]
            shop_id = data["shop"]["id"]
            shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
            api_token = data["shop"]["api_token"]

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=30)
        report = await fetch_full_report(api_token, start_date, end_date)

        if not report:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
        article_data = [item for item in report if item.get("sa_name") == article]

        if not article_data:
            await message.answer(
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {article} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        current_quantity = sum(item.get("quantity", 0) for item in article_data)
        current_revenue = sum(
            item.get("retail_price_withdisc_rub", 0) for item in article_data
        )
        current_commission = sum(
            item.get("ppvz_sales_commission", 0)
            + item.get("ppvz_vw", 0)
            + item.get("ppvz_vw_nds", 0)
            for item in article_data
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        session = sessionmaker()(bind=engine)
        try:
            product_cost = (
                session.query(ProductCost)
                .filter(
                    ProductCost.shop_id == shop_id, ProductCost.article == str(article)
                )
                .first()
            )
            current_cost = product_cost.cost if product_cost else 0
        finally:
            session.close()

        current_profit = (
            current_revenue - current_commission - (current_cost * current_quantity)
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast_revenue = new_price * current_quantity
        forecast_profit = (
            forecast_revenue - current_commission - (new_cost * current_quantity)
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = (
            f"üîÆ <b>–°–∏–º—É–ª—è—Ç–æ—Ä ¬´–ê —á—Ç–æ –µ—Å–ª–∏?¬ª –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}</b>\n\n"
            f"<b>–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü):</b>\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {current_quantity} —à—Ç.\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {current_revenue:.2f} —Ä—É–±.\n"
            f"üíµ –ü—Ä–∏–±—ã–ª—å: {current_profit:.2f} —Ä—É–±.\n"
            f"üè∑Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_revenue / current_quantity:.2f} —Ä—É–±./—à—Ç.\n"
            f"üìä –¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_cost:.2f} —Ä—É–±./—à—Ç.\n\n"
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:</b>\n"
            f"üÜï –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.2f} —Ä—É–±./—à—Ç.\n"
            f"üÜï –ù–æ–≤–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_cost:.2f} —Ä—É–±./—à—Ç.\n"
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {forecast_revenue:.2f} —Ä—É–±.\n"
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {forecast_profit:.2f} —Ä—É–±.\n\n"
            f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b>\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {forecast_revenue - current_revenue:+.2f} —Ä—É–±. "
            f"({(forecast_revenue / current_revenue - 1) * 100 if current_revenue else 0:+.1f}%)\n"
            f"üíµ –ü—Ä–∏–±—ã–ª—å: {forecast_profit - current_profit:+.2f} —Ä—É–±. "
            f"({(forecast_profit / current_profit - 1) * 100 if current_profit else 0:+.1f}%)\n\n"
            "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–∂ –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞</i>"
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="what_if_simulator")
        )
        keyboard.add(
            InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="analytics")
        )

        await message.answer(text, reply_markup=keyboard)
        await state.finish()

    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>1200, 800</code> –∏–ª–∏ <code>1200 800</code>"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.finish()


async def product_analytics_callback(callback: types.CallbackQuery, state: FSMContext,start_date,end_date):
    print("product_analytics_callback")
    async with state.proxy() as data:
        if "shop" not in data:
            print("shop in data")
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return

        shop_id = data["shop"]["id"]
        shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data["shop"]["api_token"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µc
    await callback.message.delete()
    message2 = await callback.message.answer(
        "<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        "–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    try:
        wb = await generate_product_analytics_report(api_token, shop_id,start_date,end_date)
        if not wb:
            await message2.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
                "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WB API\n"
                "3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        file_stream = io.BytesIO()
        wb.save(file_stream)
        file_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message2.delete()
        file = InputFile(file_stream, filename=f"—Ç–æ–≤–∞—Ä–Ω–∞—è_–∞–Ω–∞–ª–∏—Ç–∏–∫–∞_{shop_name}.xlsx")
        await callback.message.answer_document(
            file,
            caption=f"–¢–æ–≤–∞—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n–ú–∞–≥–∞–∑–∏–Ω: {shop_name}",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

#–í—ã–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–≥–¥–∞ —Ç—Ä–∏–≥–µ—Ä–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Å —ç–∫—Å–µ–ª—å –æ—Ç—á—ë—Ç–æ–º
async def start_analytics_report(callback: types.CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å generate_product_analytics_report
    await state.update_data(report_type="product_analytics")
    await custom_period_callback(callback, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞

async def generate_product_analytics_report(api_token: str, shop_id: int, start_date, end_date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
    loop = asyncio.get_event_loop()
    all_data = await loop.run_in_executor(
        None,
        fetch_report_detail_by_period,
        api_token,
        start_date,
        end_date
    )
    
    if not all_data:
        print("no data from API")
        return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    report_data = []
    for item in all_data:
        try:
            sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
            if start_date <= sale_date <= end_date:
                report_data.append(item)
        except (ValueError, TypeError):
            continue

    if not report_data:
        print("no report_data")
        return None

    # –°–æ–∑–¥–∞–µ–º Excel-–∫–Ω–∏–≥—É
    try:
        wb = load_workbook("template.xlsx")
    except FileNotFoundError:
        wb = openpyxl.Workbook()
    
    ws = wb.active
    ws.title = "–¢–æ–≤–∞—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"

    headers = [
        "–ê—Ä—Ç–∏–∫—É–ª",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        "–í—ã—Ä—É—á–∫–∞",
        "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å —Ä–µ–∫–ª–∞–º–æ–π",
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂",
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å CPM",
        "–ó–∞–∫–∞–∑—ã (—à—Ç)",
        "–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç)",
        "–í–æ–∑–≤—Ä–∞—Ç—ã (—à—Ç)",
        "–í–æ–∑–≤—Ä–∞—Ç—ã (—Ä—É–±)",
        "% –≤—ã–∫—É–ø–∞",
        "–ö–æ–º–∏—Å—Å–∏—è (—Ä—É–±)",
        "% –∫–æ–º–∏—Å—Å–∏–∏",
        "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ (—Ä—É–±)",
        "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –Ω–∞ –µ–¥",
        "% –ª–æ–≥–∏—Å—Ç–∏–∫–∏",
        "–í—Å–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è",
        "% —É–¥–µ—Ä–∂–∞–Ω–∏–π",
        "–†–µ–∫–ª–∞–º–∞",
        "–†–µ–∫–ª–∞–º–∞ % –æ—Ç –≤—ã—Ä—É—á–∫–∏",
        "–ü—Ä–∏–±—ã–ª—å –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã",
        "–£–¥–µ—Ä–∂–∞–Ω–∏—è",
        "–ù–∞–ª–æ–≥",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num, value=header)
        #cell.font = Font(bold=True)
        #cell.fill = PatternFill(
        #    start_color="DDEBF7", end_color="DDEBF7", fill_type="solid"
        #)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    session = sessionmaker(bind=engine)()
    regular_expenses = 0
    days_in_period = (end_date - start_date).days + 1
    for expense in session.query(RegularExpense).filter(
            RegularExpense.shop_id == shop_id
    ):
        if expense.frequency == RegularExpenseFrequency.DAILY:
            regular_expenses += expense.amount * days_in_period
        elif expense.frequency == RegularExpenseFrequency.WEEKLY:
            regular_expenses += expense.amount * (days_in_period / 7)
        elif expense.frequency == RegularExpenseFrequency.MONTHLY:
            regular_expenses += expense.amount * (days_in_period / 30)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    articles_data = {}
    for item in report_data:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º report_data –≤–º–µ—Å—Ç–æ report
        article = item.get("sa_name")
        if not article:
            if item.get("nm_id", 0):
                # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ nm_id
                for article2, item2 in articles_data.items():
                    if item2.get("nm_id") == item.get("nm_id"):
                        article = article2
                        break
        if not article:
            continue

        if article not in articles_data:
            articles_data[article] = {
                "subject_name": item.get("subject_name", ""),
                "orders": 0,
                "sales": 0,
                "returns": 0,
                "cancellations": 0,
                "sales_rub": 0,
                "returns_rub": 0,
                "commission": 0,
                "logistics": 0,
                "storage": 0,
                "return_logistics": 0,
                "nm_id": item.get("nm_id", 0),
                "deduction": 0
            }

        doc_type = item.get("doc_type_name", "")
        quantity = item.get("quantity", 0)
        price = item.get("retail_price_withdisc_rub", 0)
        retail_price = item.get("retail_price_withdisc_rub", 0)

        if "–ø—Ä–æ–¥–∞–∂–∞" in doc_type.lower() or "sale" in doc_type.lower():
            articles_data[article]["sales"] += quantity
            articles_data[article]["sales_rub"] += price * quantity
        elif "–≤–æ–∑–≤—Ä–∞—Ç" in doc_type.lower() or "return" in doc_type.lower():
            articles_data[article]["returns"] += quantity
            articles_data[article]["returns_rub"] += price
        elif "–æ—Ç–º–µ–Ω–∞" in doc_type.lower() or "cancellation" in doc_type.lower():
            articles_data[article]["cancellations"] += quantity
        
        articles_data[article]["deduction"] += item.get('deduction', 0)
        articles_data[article]["commission"] += retail_price - item.get("ppvz_for_pay", 0)
        articles_data[article]["commission"] -= item.get("ppvz_reward", 0)
        articles_data[article]["commission"] -= item.get("ppvz_sales_commission", 0)
        articles_data[article]["logistics"] += item.get("delivery_rub", 0)
        articles_data[article]["storage"] += item.get("storage_fee", 0)
        articles_data[article]["orders"] += quantity

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    orders = (
        session.query(Order)
        .filter(Order.is_bouhght.is_(True))
        .filter(Order.date >= start_date)
        .filter(Order.date <= end_date)
        .filter(Order.isCancel.is_(False))
        .filter(Order.shop_id == shop_id)
        .all()
    )

    for order in orders:
        if order.supplierArticle not in articles_data:
            articles_data[order.supplierArticle] = {
                "subject_name": order.supplierArticle,
                "orders": 0,
                "sales": 0,
                "returns": 0,
                "cancellations": 0,
                "sales_rub": 0,
                "returns_rub": 0,
                "commission": 0,
                "logistics": 0,
                "storage": 0,
                "return_logistics": 0,
                "nm_id": order.nmId,
                "deduction": 0
            }
        articles_data[order.supplierArticle]["sales_rub"] += order.priceWithDisc
        articles_data[order.supplierArticle]["sales"] += 1
        articles_data[order.supplierArticle]["orders"] += 1
        articles_data[order.supplierArticle]["commission"] += order.priceWithDisc - order.forPay

    amount_articles = len(articles_data)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    for item in report_data:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º report_data –≤–º–µ—Å—Ç–æ report
        if item.get("nm_id", 0) == 0:
            if item.get('bonus_type_name', '') == "–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ ¬´–í–ë.–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ¬ª":
                continue
            if item.get("ppvz_reward", 0):
                for item2 in report_data:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º report_data
                    if item2.get("srid") == item.get("srid"):
                        if item2.get("sa_name"):
                            articles_data[item2.get("sa_name")]["commission"] -= item.get("ppvz_reward")
                            break
            deduction = item.get("deduction", 0) / amount_articles if amount_articles > 0 else 0
            storage = item.get("storage_fee", 0) / amount_articles if amount_articles > 0 else 0
            for article, data in articles_data.items():
                data["deduction"] += deduction
                data["storage"] += storage

    regular_expenses_for_article = regular_expenses / amount_articles if amount_articles > 0 else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
    try:
        product_costs = (
            session.query(ProductCost).filter(ProductCost.shop_id == shop_id).all()
        )
        cost_map = {pc.article: pc.cost for pc in product_costs}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        cost_map = {}

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É
    try:
        tax_setting = (
            session.query(TaxSystemSetting)
            .filter(TaxSystemSetting.shop_id == shop_id)
            .first()
        )
        if tax_setting:
            if tax_setting.tax_system == TaxSystemType.USN_6:
                tax_rate = 0.06
            elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                tax_rate = 0.0
            elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                tax_rate = tax_setting.custom_percent / 100 if tax_setting.custom_percent else 0.0
            else:
                tax_rate = 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        tax_rate = 0.0

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    row_num = 2
    for article, data in articles_data.items():
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        revenue = data["sales_rub"] - data["returns_rub"]
        total_sales = data["sales"] - data["returns"]
        buyout_rate = (total_sales / data["orders"]) if data["orders"] else 0

        # –ö–æ–º–∏—Å—Å–∏–∏
        commission_percent = (data["commission"] / revenue) if revenue else 0

        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
        logistics_per_unit = data["logistics"] / total_sales if total_sales else 0
        logistics_percent = (data["logistics"] / revenue) if revenue else 0

        # –£–¥–µ—Ä–∂–∞–Ω–∏—è
        total_deductions = (
            data["commission"]
            + data["logistics"]
            + data["return_logistics"]
            + data["storage"]
            + data["deduction"]
        )
        deductions_percent = (total_deductions / revenue) if revenue else 0

        # –ù–∞–ª–æ–≥
        tax = revenue * tax_rate

        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost_per_item = cost_map.get(article, 0)
        total_cost = cost_per_item * total_sales

        # –ü—Ä–∏–±—ã–ª—å
        profit_without_ads = (
            revenue - abs(total_cost) - abs(total_deductions) - abs(tax) - abs(regular_expenses_for_article)
        )

        # –†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        try:
            advertisement = sum(
                i.amount
                for i in session.query(Advertisement)
                .filter(Advertisement.nmId == int(data["nm_id"]))
                .filter(Advertisement.date >= start_date)
                .filter(Advertisement.date <= end_date)
                .all()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            advertisement = 0

        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        try:
            penalty = sum(
                i.sum
                for i in session.query(Penalty)
                .filter(Penalty.nm_id == data["nm_id"])
                .filter(Penalty.date >= start_date)
                .filter(Penalty.date <= end_date)
                .all()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤: {e}")
            penalty = 0

        profit_with_ads = (
            revenue
            - abs(total_cost)
            - abs(total_deductions)
            - abs(tax)
            - abs(advertisement)
            - abs(penalty)
            - abs(regular_expenses_for_article)
        )

        # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
        profitability_cpm = (profit_without_ads / total_cost) * 100 if total_cost else 0
        profitability_sales = (profit_with_ads / revenue) * 100 if revenue else 0

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
        ws.cell(row=row_num, column=1, value=article)
        ws.cell(row=row_num, column=2, value=data["subject_name"])
        ws.cell(row=row_num, column=3, value=abs(revenue))
        ws.cell(row=row_num, column=4, value=profit_with_ads)
        ws.cell(row=row_num, column=5, value=profitability_sales)
        ws.cell(row=row_num, column=6, value=profitability_cpm)
        ws.cell(row=row_num, column=7, value=abs(data["orders"]))
        ws.cell(row=row_num, column=8, value=abs(data["sales"]))
        ws.cell(row=row_num, column=9, value=abs(data["returns"]))
        ws.cell(row=row_num, column=10, value=abs(data["returns_rub"]))
        ws.cell(row=row_num, column=11, value=abs(buyout_rate))
        ws.cell(row=row_num, column=12, value=data["commission"])
        ws.cell(row=row_num, column=13, value=abs(commission_percent))
        ws.cell(row=row_num, column=14, value=abs(data["logistics"]))
        ws.cell(row=row_num, column=15, value=abs(logistics_per_unit))
        ws.cell(row=row_num, column=16, value=abs(logistics_percent))
        ws.cell(row=row_num, column=17, value=abs(total_deductions))
        ws.cell(row=row_num, column=18, value=abs(deductions_percent))
        ws.cell(row=row_num, column=19, value=advertisement)
        ws.cell(row=row_num, column=20, value=(advertisement / revenue * 100) if revenue else 0)
        ws.cell(row=row_num, column=21, value=profit_without_ads)
        ws.cell(row=row_num, column=22, value=data["deduction"])
        ws.cell(row=row_num, column=23, value=abs(tax))

        row_num += 1


        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    last_row = ws.max_row + 1
    ws.cell(row=last_row, column=1, value="–ò–¢–û–ì–û")
    for col in range(3, 24):  # –ù–∞—á–∏–Ω–∞—è —Å –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–∫–∞–∑—ã (—à—Ç)" –¥–æ "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å CPM"
        col_letter = get_column_letter(col)
        if col in [5, 6, 11, 13, 16, 18, 20, 24]:  # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            ws.cell(row=last_row, column=col, value=f"=AVERAGE({col_letter}2:{col_letter}{last_row - 1})")
        else:  # –°—É–º–º–∞ –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
            ws.cell(row=last_row, column=col, value=f"=SUM({col_letter}2:{col_letter}{last_row - 1})")
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    apply_excel_formatting(ws)
    
    session.close()
    return wb

def apply_excel_formatting(ws):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Excel-–ª–∏—Å—Ç—É"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 2) * 1.2
        ws.column_dimensions[column].width = adjusted_width

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    for row in ws.iter_rows(
        min_row=2, max_row=ws.max_row, min_col=3, max_col=ws.max_column
    ):
        for cell in row:
            if isinstance(cell.value, (int, float)):
                # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
                if cell.column_letter in ["E", "K", "M", "P", "T"]:
                    cell.number_format = "0.00%"
                elif (
                    cell.column >= 7
                    and cell.column <= 24
                    and cell.column not in [10, 11]
                ):
                    cell.number_format = "#,##0.00"
                else:
                    cell.number_format = "#,##0"

    # –ì—Ä–∞–Ω–∏—Ü—ã
    thin_border = Border(
        left=Side(style="thin"),
        right=Side(style="thin"),
        top=Side(style="thin"),
        bottom=Side(style="thin"),
    )

    for row in ws.iter_rows(
        min_row=1, max_row=ws.max_row, min_col=1, max_col=ws.max_column
    ):
        for cell in row:
            cell.border = thin_border

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for cell in ws[1]:
        cell.alignment = Alignment(horizontal="center", vertical="center")

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    ws.freeze_panes = "A2"


async def back_to_analytics(callback: types.CallbackQuery, state: FSMContext):
    await analytics_callback(callback)

async def finances_handler(callback: types.CallbackQuery, state: FSMContext):
    text = "<b>–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å—É.\n\n‚ñ´Ô∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å\n‚ñ´Ô∏è –°—Ä–æ–∫–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –í–∞—à–∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç\n‚ñ´Ô∏è –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã–≥–æ–¥–µ–Ω –í–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –æ–Ω –æ–∫—É–ø–∞–µ—Ç—Å—è\n‚ñ´Ô∏è –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã–≥–æ–¥–µ–Ω –í–∞—à –±–∏–∑–Ω–µ—Å"
    session = sessionmaker(bind=engine)()
    print(callback.from_user.id)
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    session.close()

    if user:
        if user.subscription_end <= datetime.now():
            text += '\n\n‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ <b>JustProfit Premium</b>. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∏ –í–∞–º —Å—Ä–∞–∑—É –∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. \n\n–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" -> "–ü–æ–¥–ø–∏—Å–∫–∞"'
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main_menu"))
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=kb)
            return
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", callback_data="an_1"))
    #kb.add(InlineKeyboardButton("ROS(–†–µ–Ω—Ç–∞–±–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂)", callback_data="an_2"))
    kb.add(InlineKeyboardButton("–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", callback_data="an_3"))
    kb.add(InlineKeyboardButton("ROI(–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π)", callback_data="an_4"))
    kb.add(InlineKeyboardButton("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", callback_data="an_5"))
    kb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main_menu"))
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=kb)


async def pnl_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return

    await callback.message.edit_text(
        "üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ (P&L)</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
    )


# –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
async def calculate_metrics_from_report(full_report, shop_id, start_date, end_date, type_data="week", calculate_current_week=True):
    session = sessionmaker()(bind=engine)
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏
        if isinstance(full_report, dict):
            report_data = full_report.get('finance', [])
            orders = full_report.get('orders', [])
            sales = full_report.get('sales', [])
        elif isinstance(full_report, list):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ finance –¥–∞–Ω–Ω—ã–µ
            report_data = full_report
            orders = []
            sales = []
        else:
            # Fallback
            report_data = []
            orders = []
            sales = []

        star = datetime.today() - timedelta(days=datetime.today().isoweekday())
        week_start = datetime(star.year, star.month, star.day + 1, 0, 0)
        print(start_date, end_date)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ pnl.py - —Å–æ–∑–¥–∞–µ–º DataFrame
        df_orders = pd.DataFrame(orders)
        df_sales = pd.DataFrame(sales)
        df_fin = pd.DataFrame(report_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        DATE_FROM = start_date.strftime("%Y-%m-%d")
        DATE_TO = end_date.strftime("%Y-%m-%d")

        def determine_period_type(date_from, date_to):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
            start_dt = dt.strptime(date_from, "%Y-%m-%d")
            end_dt = dt.strptime(date_to, "%Y-%m-%d")
            
            days_diff = (end_dt - start_dt).days
            
            if days_diff == 0:
                # –î–µ–Ω—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—é
                period_start = start_dt - timedelta(days=3)
                period_end = start_dt + timedelta(days=3)
                period_type = "–¥–µ–Ω—å"
            elif days_diff <= 7:
                # –ù–µ–¥–µ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—è—Ü
                period_start = start_dt - timedelta(days=15)
                period_end = end_dt + timedelta(days=15)
                period_type = "–Ω–µ–¥–µ–ª—è"
            elif days_diff <= 31:
                # –ú–µ—Å—è—Ü - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª
                period_start = start_dt - timedelta(days=30)
                period_end = end_dt + timedelta(days=30)
                period_type = "–º–µ—Å—è—Ü"
            else:
                # –ì–æ–¥ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–≥–æ–¥–∞
                period_start = start_dt - timedelta(days=180)
                period_end = end_dt + timedelta(days=180)
                period_type = "–≥–æ–¥"
            
            return period_start.strftime("%Y-%m-%d"), period_end.strftime("%Y-%m-%d"), period_type

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        extended_date_from, extended_date_to, period_type = determine_period_type(DATE_FROM, DATE_TO)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
        start_dt = dt.strptime(extended_date_from, "%Y-%m-%d")
        end_dt = dt.strptime(extended_date_to, "%Y-%m-%d")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 6 –º–µ—Å—è—Ü–µ–≤
        max_period_days = 180
        if (end_dt - start_dt).days > max_period_days:
            # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
            if period_type == "–≥–æ–¥":
                start_dt = end_dt - timedelta(days=max_period_days)
            else:
                end_dt = start_dt + timedelta(days=max_period_days)
            extended_date_from = start_dt.strftime("%Y-%m-%d")
            extended_date_to = end_dt.strftime("%Y-%m-%d")
        
        # day‚Äë—Å—Ç–æ–ª–±–µ—Ü
        if not df_orders.empty:
            df_orders["day"] = pd.to_datetime(df_orders["date"]).dt.date
        else:
            df_orders["day"] = pd.to_datetime("2025-01-01").date()
            
        if not df_sales.empty:
            df_sales["day"] = pd.to_datetime(df_sales["date"]).dt.date
        else:
            df_sales["day"] = pd.to_datetime("2025-01-01").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è rr_dt –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not df_fin.empty:
            if "rr_dt" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["rr_dt"]).dt.date
            elif "date" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["date"]).dt.date
            elif "sale_dt" in df_fin.columns:
                df_fin["day"] = pd.to_datetime(df_fin["sale_dt"]).dt.date
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è –¥–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü day
                df_fin["day"] = pd.to_datetime("2025-01-01").date()
        else:
            df_fin["day"] = pd.to_datetime("2025-01-01").date()

        # 4.1 Orders
        if not df_orders.empty:
            grp_orders = (
                df_orders.groupby("day")
                        .agg(
                            order_sum = ("priceWithDisc", "sum"),
                            ordered_qty = ("srid", "size"),
                            orders_cnt = ("srid", "nunique")
                        )
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_orders = pd.DataFrame(columns=['order_sum', 'ordered_qty', 'orders_cnt'])

        # 4.2 Sales (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏, –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç—ã)
        if not df_sales.empty:
            sales_mask = df_sales["saleID"].str.startswith("S", na=False)
            grp_sales = (
                df_sales[sales_mask]
                .groupby("day")
                .agg(
                    sales_sum = ("priceWithDisc", "sum"),
                    sold_qty = ("saleID", "size"),
                    for_pay = ("forPay", "sum")
                )
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_sales = pd.DataFrame(columns=['sales_sum', 'sold_qty', 'for_pay'])

        # 4.3 Finance ‚Äî logistica = —Ç–æ–ª—å–∫–æ delivery_rub
        if not df_fin.empty:
            grp_fin = (
                df_fin.groupby("day")
                    .agg(
                        delivery_cost = ("delivery_rub", "sum"),
                        storage = ("storage_fee", "sum"),
                        penalty = ("penalty", "sum"),
                        acceptance = ("acceptance", "sum"),
                        pay_for_goods = ("ppvz_for_pay", "sum")
                    )
                    .apply(pd.to_numeric, errors="coerce")
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            grp_fin = pd.DataFrame(columns=['delivery_cost', 'storage', 'penalty', 'acceptance', 'pay_for_goods'])

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        all_daily = (
            grp_orders
            .join(grp_sales, how="outer")
            .join(grp_fin, how="outer")
            .fillna(0)
            .infer_objects(copy=False)
        )

        all_daily["buyout_pct"] = (
            all_daily["sold_qty"] / all_daily["ordered_qty"]
        ).fillna(0)

        all_daily["total_to_pay"] = (
            all_daily["pay_for_goods"]
            - all_daily[["delivery_cost", "storage", "penalty", "acceptance"]].sum(axis=1)
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        current_start = start_date.date()
        current_end = end_date.date()
        daily = all_daily[(all_daily.index >= current_start) & (all_daily.index <= current_end)]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"–ü–µ—Ä–∏–æ–¥: {current_start} - {current_end}")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ all_daily: {len(all_daily)}")
        print(f"–ó–∞–ø–∏—Å–µ–π –≤ daily –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(daily)}")
        if not daily.empty:
            print(f"–ò–Ω–¥–µ–∫—Å—ã daily: {daily.index.tolist()}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∏ —à—Ç—Ä–∞—Ñ—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date)
            .filter(Advertisement.date <= end_date)
        )

        stops = sum(
            i.amount for i in session.query(Penalty)
            .filter(Penalty.shop_id == shop_id)
            .filter(Penalty.date >= start_date)
            .filter(Penalty.date <= end_date)
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        tax_setting = session.query(TaxSystemSetting).filter(TaxSystemSetting.shop_id == shop_id).first()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
        revenue = daily["sales_sum"].sum()
        if tax_setting:
            if tax_setting.tax_system == TaxSystemType.USN_6:
                tax_rate = 0.06
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                tax_rate = 0.0
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                tax_rate = tax_setting.custom_percent / 100
                print("tax_rate = ", tax_rate)
            else:
                tax_rate = 0.0
                print("–ø–æ—à–ª–æ –≤ else")
        else:
            tax_rate = 0.0
            
        tax = revenue * tax_rate

        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–∫–∞–∫ –≤ pnl.py)
        cost_of_goods = 0
        articles = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        for item in report_data:
            if not isinstance(item, dict):
                continue
            article = item.get("nm_id")
            quantity = item.get("quantity", 0)
            if article and quantity:
                if article not in articles:
                    articles[article] = 0
                articles[article] += quantity

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        for article, quantity in articles.items():
            print(article, quantity)
            try:
                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                product_cost = (
                    session.query(ProductCost)
                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                    .first()
                )
                if product_cost:
                    cost_of_goods += product_cost.cost * quantity
            except:
                pass

        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        regular_expenses = 0
        days_in_period = (end_date - start_date).days + 1
        # print(start_date, end_date, days_in_period)
        for expense in session.query(RegularExpense).filter(RegularExpense.shop_id == shop_id):
            if type_data == "week":
                if expense.frequency == RegularExpenseFrequency.WEEKLY:
                    regular_expenses += expense.amount * 1
                if expense.frequency == RegularExpenseFrequency.DAILY:
                    regular_expenses += expense.amount * 7
            if type_data == "month":
                if expense.frequency == RegularExpenseFrequency.DAILY:
                    regular_expenses += expense.amount * 30
                if expense.frequency == RegularExpenseFrequency.WEEKLY:
                    regular_expenses += expense.amount * 4
                if expense.frequency == RegularExpenseFrequency.MONTHLY:
                    regular_expenses += expense.amount * 1
            if type_data == "year":
                if expense.frequency == RegularExpenseFrequency.DAILY:
                    regular_expenses += expense.amount * 365
                if expense.frequency == RegularExpenseFrequency.WEEKLY:
                    regular_expenses += expense.amount * 52
                if expense.frequency == RegularExpenseFrequency.MONTHLY:
                    regular_expenses += expense.amount * 12

        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–∫–∞–∫ –≤ pnl.py)
        commission = daily["pay_for_goods"].sum()
        logistics = daily["delivery_cost"].sum()
        storage_fee = daily["storage"].sum()
        deduction = daily["penalty"].sum() + stops
        
        net_profit = revenue - commission - logistics - storage_fee - tax - cost_of_goods - regular_expenses - deduction - advert

        # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (–∫–∞–∫ –≤ pnl.py)
        profitability = (net_profit / revenue) * 100 if revenue > 0 else 0

        # –†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã

        # –†–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ)
        one_time_expenses = (
            session.query(OneTimeExpense)
            .filter(OneTimeExpense.shop_id == shop_id)
            .all()
        )
        total_one_time = sum(expense.amount for expense in one_time_expenses)

        # –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ –±–ª–æ–∫–µ –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        payback_period = "–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤ –≥–æ–¥–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ"

        # ROI
        roi = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if total_one_time > 0:
            roi_value = (net_profit / total_one_time) * 100
            roi = f"{roi_value:.1f}%"
            if roi_value > 100:
                roi += " ‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –æ–∫—É–ø–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è!"

        try:
            ros_value = (net_profit / revenue) * 100
        except:
            ros_value = 0
        return {
            "revenue": revenue,
            "commission": commission,
            "logistics": logistics,
            "storage": storage_fee,
            "cost_of_goods": cost_of_goods,
            "tax": tax,
            "regular_expenses": regular_expenses,
            "net_profit": net_profit,
            "profitability": profitability,
            "payback_period": payback_period,
            "roi": roi,
            "total_one_time": total_one_time,
            "advert": advert,
            "stops": stops,
            "deduction": deduction,
            "ros": ros_value,
        }
    finally:
        session.close()


async def select_anal_period_callback(callback: types.CallbackQuery, state: FSMContext):





    period_type = callback.data.split("_")[1]  # day, week, month, year, custom
    await callback.message.delete()
    message = await callback.message.answer(
        text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\n\n"
             "‚ÄºÔ∏è –í–∞–∂–Ω–æ: <u>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ—Ç 3 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ "
             "(–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Wildberries - –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞)</u>"
    )

    async with state.proxy() as data:
        shop_id = data["shop"]["id"]
        shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data["shop"]["api_token"]
        an_type = data["an_type"]

        now = datetime.now()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        if period_type == "custom" or period_type.startswith("custom_"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã
            if data.get("custom_period") and data.get("custom_start_date") and data.get("custom_end_date"):
                current_start = data["custom_start_date"]
                current_end = data["custom_end_date"]
                type_datalol = data.get("period_size", "custom")
                period_name = f"{current_start.strftime('%d.%m')}-{current_end.strftime('%d.%m.%Y')}"
            else:
                # –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã
                current_start = datetime(now.year, now.month, now.day)
                current_end = now
                type_datalol = "day"
                period_name = f"{current_start.strftime('%d.%m')}-{now.strftime('%d.%m')}"
        elif period_type == "week":
            start_week = now - timedelta(days=now.isoweekday() - 1)
            current_start = datetime(start_week.year, start_week.month, start_week.day)
            current_end = now
            type_datalol = "week"
            period_name = f"{current_start.strftime('%d.%m')}-{now.strftime('%d.%m')}"
        elif period_type == "month":
            current_start = datetime(now.year, now.month, 1)
            current_end = now
            type_datalol = "month"
            period_name = f"{current_start.strftime('%d.%m')}-{now.strftime('%d.%m')}"
        elif period_type == "year":
            current_start = datetime(now.year, 1, 1)
            current_end = now
            type_datalol = "year"
            period_name = f"{current_start.strftime('%d.%m')}-{now.strftime('%d.%m')}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–¥–µ–ª—è
            start_week = now - timedelta(days=now.isoweekday() - 1)
            current_start = datetime(start_week.year, start_week.month, start_week.day)
            current_end = now
            type_datalol = "week"
            period_name = f"{current_start.strftime('%d.%m')}-{now.strftime('%d.%m')}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
    loop = asyncio.get_event_loop()
    full_report = await loop.run_in_executor(
        None,
        fetch_report_detail_by_period,
        api_token,
        current_start,
        current_end
    )
    current_report = full_report['finance']
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–µ–¥–µ–ª—è ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if not current_report and period_type != "week":
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            show_alert=True,
        )
        return


    async with state.proxy() as data:
        shop_id = data["shop"]["id"]
        shop_name = data["shop"]["name"] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data["shop"]["api_token"]
        an_type = data["an_type"]
        type_data = int(an_type.split("_")[1])  # <-- –ü–ï–†–ï–ù–ï–°–ò–¢–ï –°–Æ–î–ê

               
    
        
    if type_data == 3:
        current_start = datetime(now.year, now.month, 1)
        current_end = now
        type_datalol = "month"
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
        loop = asyncio.get_event_loop()
        current_report = await loop.run_in_executor(
            None,
            fetch_report_detail_by_period,
            api_token,
            current_start,
            current_end
        )

    # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    start_now = datetime.now() - timedelta(days=365)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
    loop = asyncio.get_event_loop()
    full_data = await loop.run_in_executor(
        None,
        fetch_report_detail_by_period,
        api_token,
        start_now,
        datetime.now()
    )
    all_data = full_data['finance']
    yearly_report = []
    if all_data:
        for i in all_data:
            if isinstance(i, dict) and "sale_dt" in i:
                try:
                    if datetime.strptime(i["sale_dt"][:10], "%Y-%m-%d") >= start_now:
                        yearly_report.append(i)
                except (ValueError, TypeError):
                    continue


    if not current_report and period_type != "week":
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            show_alert=True,
        )
        return
    # print(an_type)
    logger.info(f"Create AN report. AN-type: {an_type}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API –≤–º–µ—Å—Ç–æ –∫—ç—à–∞
    loop = asyncio.get_event_loop()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫–∞–∫ –≤ pnl.py
    DATE_FROM = current_start.strftime("%Y-%m-%d")
    DATE_TO = current_end.strftime("%Y-%m-%d")
    
    def determine_period_type(date_from, date_to):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
        start_dt = dt.strptime(date_from, "%Y-%m-%d")
        end_dt = dt.strptime(date_to, "%Y-%m-%d")
        
        days_diff = (end_dt - start_dt).days
        
        if days_diff == 0:
            # –î–µ–Ω—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—é
            period_start = start_dt - timedelta(days=3)
            period_end = start_dt + timedelta(days=3)
            period_type = "–¥–µ–Ω—å"
        elif days_diff <= 7:
            # –ù–µ–¥–µ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—è—Ü
            period_start = start_dt - timedelta(days=15)
            period_end = end_dt + timedelta(days=15)
            period_type = "–Ω–µ–¥–µ–ª—è"
        elif days_diff <= 31:
            # –ú–µ—Å—è—Ü - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª
            period_start = start_dt - timedelta(days=30)
            period_end = end_dt + timedelta(days=30)
            period_type = "–º–µ—Å—è—Ü"
        else:
            # –ì–æ–¥ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–≥–æ–¥–∞
            period_start = start_dt - timedelta(days=180)
            period_end = end_dt + timedelta(days=180)
            period_type = "–≥–æ–¥"
        
        return period_start.strftime("%Y-%m-%d"), period_end.strftime("%Y-%m-%d"), period_type

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    extended_date_from, extended_date_to, period_type = determine_period_type(DATE_FROM, DATE_TO)
    
    full_data = await loop.run_in_executor(
        None,
        fetch_report_detail_by_period,
        api_token,
        dt.strptime(extended_date_from, "%Y-%m-%d"),
        dt.strptime(extended_date_to, "%Y-%m-%d")
    )
    report = full_data['finance']
    if not report:
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )
        return
        
    await message.edit_text(text="–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å ...")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    current_report = []
    for report_str in report:
        if (current_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= current_end):
            current_report.append(report_str)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    current_metrics = await calculate_metrics_from_report(
        full_report, shop_id, current_start, current_end, type_datalol
    )

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É
    # revenue_change = current_metrics["revenue"] - (previous_metrics["revenue"] if previous_metrics else 0)
    # profit_change = current_metrics["net_profit"] - (previous_metrics["net_profit"] if previous_metrics else 0)

    # revenue_indicator = "üü¢‚ñ≤" if revenue_change >= 0 else "üî¥‚ñº"
    # profit_indicator = "üî¥‚ñº" if profit_change >= 0 else "üî¥‚ñº"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º last_metrics
    last_metrics = None
    
    if an_type =="an_1":
        if period_type == "week":
            date_start = current_start - timedelta(days=7)
            date_end = date_start + timedelta(days=7)
            new_report = []
            for report_str in report:
                if (date_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= date_end):
                    new_report.append(report_str)
            last_metrics = await calculate_metrics_from_report(full_report, shop_id, date_start, date_end, "week", False)
        elif period_type == "month":
            date_start = current_start - timedelta(days=30)
            date_end = date_start + timedelta(days=30)
            new_report = []
            for report_str in report:
                if (date_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= date_end):
                    new_report.append(report_str)
            last_metrics = await calculate_metrics_from_report(full_report, shop_id, date_start, date_end, "month", False)
        elif period_type == "year":
            date_start = current_start - timedelta(days=365)
            date_end = date_start + timedelta(days=365)
            new_report = []
            for report_str in report:
                if (date_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= date_end):
                    new_report.append(report_str)
            last_metrics = await calculate_metrics_from_report(full_report, shop_id, date_start, date_end, "year", False)
        elif period_type == "custom":
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ state
            async with state.proxy() as data:
                date_start = data.get("custom_start_date")
                date_end = data.get("custom_end_date")
            
            if date_start and date_end:
                new_report = []
                for report_str in report:
                    if (date_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= date_end):
                        new_report.append(report_str)
                last_metrics = await calculate_metrics_from_report(full_report, shop_id, date_start, date_end, "custom", False)
            else:
                # Fallback –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                date_start = current_start - timedelta(days=30)
                date_end = date_start + timedelta(days=30)
                new_report = []
                for report_str in report:
                    if (date_start <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= date_end):
                        new_report.append(report_str)
                last_metrics = await calculate_metrics_from_report(full_report, shop_id, date_start, date_end, "month", False)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = ""

    #
    #         f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {current_metrics['net_profit']:.2f} —Ä—É–±. \n"
    #         f"üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {current_metrics['profitability']:.1f}%\n"
    #         f"‚è≥ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {current_metrics['payback_period']}\n"
    #         f"üìä ROI: {current_metrics['roi']}\n\n"
    async with state.proxy() as data:
        an_type = data["an_type"]
    if an_type == "an_1":
        # –ë–ª–æ–∫ an_1
        if last_metrics is not None:
            destanation = f"‚ñ≤ {last_metrics['net_profit']:.2f} —Ä—É–±." if last_metrics['net_profit'] < current_metrics['net_profit'] else f"‚ñº {last_metrics['net_profit']:.2f} —Ä—É–±."
        else:
            destanation = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        text = (
            f"–ü–µ—Ä–∏–æ–¥: <b>({period_name})</b>\n\n"
            "<u>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</u>\n"
            f"‚ñ´Ô∏è–í—ã—Ä—É—á–∫–∞: {current_metrics['revenue']:.2f} —Ä—É–±.\n"
            f"‚ñ´Ô∏è–ö–æ–º–∏—Å—Å–∏–∏: {current_metrics['commission']:.2f} —Ä—É–±. <b>{current_metrics['commission']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–õ–æ–≥–∏—Å—Ç–∏–∫–∞: {current_metrics['logistics']:.2f} —Ä—É–±. <b>{current_metrics['logistics']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–•—Ä–∞–Ω–µ–Ω–∏–µ: {current_metrics['storage']:.2f} —Ä—É–±. <b>{current_metrics['storage']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_metrics['cost_of_goods']:.2f} —Ä—É–±. <b>{current_metrics['cost_of_goods']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–ù–∞–ª–æ–≥: {current_metrics['tax']:.2f} —Ä—É–±. <b>{current_metrics['tax']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_metrics['regular_expenses']:.2f} —Ä—É–±. <b>{current_metrics['regular_expenses']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_metrics['advert']} —Ä—É–±. <b>{current_metrics['advert']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–ü—Ä–æ—á–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {current_metrics['deduction']} —Ä—É–±. <b>{current_metrics['deduction']/current_metrics['revenue']*100:.1f}%</b>\n"
            f"‚ñ´Ô∏è–®—Ç—Ä–∞—Ñ—ã: {current_metrics['stops']} —Ä—É–±. <b>{current_metrics['stops']/current_metrics['revenue']*100:.1f}%</b>\n\n"
            f"„ÄΩÔ∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {current_metrics['net_profit']:.2f} —Ä—É–±. ({destanation}) <b>{current_metrics['net_profit']/current_metrics['revenue']*100:.1f}%</b>\n\n"
        )

        # –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–µ –º–µ—Å—Ç–æ ->

        # –ë–ª–æ–∫ an_4 (—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å)
        text += (
            "<u>–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</u>\n"
            f"‚ñ´Ô∏è–í—ã—Ä—É—á–∫–∞: {current_metrics['revenue']:.2f} —Ä—É–±.\n"
            f"‚ñ´Ô∏è–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {current_metrics['net_profit']:.2f} —Ä—É–±.\n"
            f"‚ñ´Ô∏è–†–∞–∑–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {current_metrics['total_one_time']:.2f} —Ä—É–±.\n"
            f"üìä ROI: {current_metrics['roi']}\n\n"
        )

        # –ë–ª–æ–∫ an_5 (–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥
        amount_good_months = 0
        net_profit = 0
        report_data = []
        for i in range(12):
            start_now = datetime.now() - timedelta(days=31 + i * 30)
            end_now = datetime.now() - timedelta(days=i * 30)
            new_report = []
            for report_str in yearly_report:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º yearly_report
                if (start_now <= datetime.strptime(report_str["sale_dt"][:10], "%Y-%m-%d") <= end_now):
                    new_report.append(report_str)
            if new_report:
                amount_good_months += 1
                report_data += new_report
            else:
                break
        start_now = datetime.now() - timedelta(days=31 + amount_good_months * 30)
        end_now = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É full_report –¥–ª—è an_5
        full_report_an_5 = {
            'finance': report_data,
            'orders': [],
            'sales': []
        }
        
        metrics_for_an_5 = await calculate_metrics_from_report(
            full_report_an_5, shop_id, start_now, end_now, "year"
        )
        
        # –†–ê–°–ß–ï–¢ –°–†–û–ö–ê –û–ö–£–ü–ê–ï–ú–û–°–¢–ò –° –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–ï–ô –ü–û –í–°–ï–ú –ú–ï–°–Ø–¶–ê–ú –ì–û–î–ê
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        session = sessionmaker()(bind=engine)
        try:
            one_time_expenses = (
                session.query(OneTimeExpense)
                .filter(OneTimeExpense.shop_id == shop_id)
                .all()
            )
            total_one_time = sum(expense.amount for expense in one_time_expenses)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            tax_setting = session.query(TaxSystemSetting).filter(TaxSystemSetting.shop_id == shop_id).first()
            if tax_setting:
                if tax_setting.tax_system == TaxSystemType.USN_6:
                    tax_rate = 0.06
                elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                    tax_rate = 0.0
                elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                    tax_rate = tax_setting.custom_percent / 100
                else:
                    tax_rate = 0.0
            else:
                tax_rate = 0.0
            
            # 1. –°–æ–±–∏—Ä–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Å—è—Ü—É –∑–∞ –≥–æ–¥
            profits_by_month = defaultdict(float)
            current_date = datetime.now()
            
            for i in range(12):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
                month_start = current_date.replace(day=1) - relativedelta(months=i+1)
                month_end = current_date.replace(day=1) - relativedelta(months=i)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –∏–∑ yearly_report
                month_data = []
                for item in yearly_report:
                    if not isinstance(item, dict):
                        continue
                    item_date = datetime.strptime(item.get("sale_dt", "2025-01-01")[:10], "%Y-%m-%d")
                    if month_start <= item_date < month_end:
                        month_data.append(item)
                
                if month_data:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü
                    month_revenue = sum(item.get("retail_price_withdisc_rub", 0) for item in month_data)
                    month_commission = sum(item.get("ppvz_sales_commission", 0) + item.get("ppvz_vw", 0) + item.get("ppvz_vw_nds", 0) for item in month_data)
                    month_logistics = sum(item.get("delivery_rub", 0) for item in month_data)
                    month_storage = sum(item.get("storage_fee", 0) for item in month_data)
                    month_penalty = sum(item.get("penalty", 0) for item in month_data)
                    
                    # –†–µ–∫–ª–∞–º–∞ –∑–∞ –º–µ—Å—è—Ü
                    month_advert = sum(
                        i.amount for i in session.query(Advertisement)
                        .filter(Advertisement.shop_id == shop_id)
                        .filter(Advertisement.date >= month_start)
                        .filter(Advertisement.date < month_end)
                    )
                    
                    # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –º–µ—Å—è—Ü
                    month_stops = sum(
                        i.sum for i in session.query(Penalty)
                        .filter(Penalty.shop_id == shop_id)
                        .filter(Penalty.date >= month_start)
                        .filter(Penalty.date < month_end)
                    )
                    
                    # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü
                    month_cost = 0
                    for item in month_data:
                        article = item.get("nm_id")
                        quantity = item.get("quantity", 0)
                        if article and quantity:
                            try:
                                supp_article = session.query(Order).filter(Order.nmId == int(article)).first().supplierArticle
                                product_cost = (
                                    session.query(ProductCost)
                                    .filter(ProductCost.shop_id == shop_id, ProductCost.article == supp_article)
                                    .first()
                                )
                                if product_cost:
                                    month_cost += product_cost.cost * quantity
                            except:
                                pass
                    
                    # –ù–∞–ª–æ–≥ –∑–∞ –º–µ—Å—è—Ü
                    month_tax = month_revenue * tax_rate
                    
                    # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü
                    month_net_profit = month_revenue - month_commission - month_logistics - month_storage - month_penalty - month_advert - month_stops - month_cost - month_tax
                    
                    month_key = month_start.strftime("%Y-%m")
                    profits_by_month[month_key] = month_net_profit
            
            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
            if profits_by_month and total_one_time > 0:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
                sorted_months = sorted(profits_by_month.items())
                profits = [profit for _, profit in sorted_months]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                X = np.arange(len(profits))
                y = np.array(profits)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ –ø–æ–ª–∏–Ω–æ–º–∞
                best_model = None
                best_score = float('inf')
                best_degree = 1
                
                for degree in range(1, min(6, len(profits))):  # –ü—Ä–æ–±—É–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –æ—Ç 1 –¥–æ 5
                    try:
                        coeffs = np.polyfit(X, y, degree)
                        poly = np.poly1d(coeffs)
                        
                        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞)
                        predicted = poly(X)
                        mse = np.mean((y - predicted) ** 2)
                        
                        if mse < best_score:
                            best_score = mse
                            best_model = poly
                            best_degree = degree
                    except:
                        continue
                
                if best_model is not None:
                    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
                    total_cumulative_profit = sum(profits)
                    month_idx = len(profits)
                    max_months = 120  # –ú–∞–∫—Å–∏–º—É–º 10 –ª–µ—Ç
                    
                    while total_cumulative_profit < total_one_time and month_idx < max_months:
                        predicted_profit = best_model(month_idx)
                        predicted_profit = max(predicted_profit, 0)  # –ù–µ –º–µ–Ω—å—à–µ 0
                        total_cumulative_profit += predicted_profit
                        month_idx += 1
                    
                    if total_cumulative_profit >= total_one_time:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–¥–∞
                        if best_degree == 1:
                            trend_type = "–ª–∏–Ω–µ–π–Ω—ã–π"
                        elif best_degree == 2:
                            trend_type = "–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π"
                        elif best_degree == 3:
                            trend_type = "–∫—É–±–∏—á–µ—Å–∫–∏–π"
                        else:
                            trend_type = f"–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π ({best_degree} —Å—Ç–µ–ø–µ–Ω–∏)"
                        
                        payback_period = f"{month_idx} –º–µ—Å—è—Ü–µ–≤ ({trend_type} —Ç—Ä–µ–Ω–¥)"
                    else:
                        payback_period = f"–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ 10 –ª–µ—Ç, {trend_type} —Ç—Ä–µ–Ω–¥)"
                else:
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
                    if metrics_for_an_5['net_profit'] > 0:
                        months = total_one_time / metrics_for_an_5['net_profit']
                        payback_period = f"{months:.1f} –º–µ—Å—è—Ü–µ–≤ (–ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç)"
                    else:
                        payback_period = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)"
            else:
                # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                payback_period = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –¥–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
                if metrics_for_an_5['net_profit'] > 0 and total_one_time > 0:
                    months = total_one_time / metrics_for_an_5['net_profit']
                    payback_period = f"{months:.1f} –º–µ—Å—è—Ü–µ–≤ (–ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç)"
        finally:
            session.close()
        
        text += (
            "<u>–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</u>\n"
            f"‚ñ´Ô∏è–†–∞–∑–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {current_metrics['total_one_time']:.2f} —Ä—É–±.\n"
            f"‚ñ´Ô∏è–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ {amount_good_months} –º–µ—Å.: {metrics_for_an_5['net_profit']:.2f} —Ä—É–±.\n"
            f"‚ñ´Ô∏è–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics_for_an_5['roi']}\n"
            f"‚ñ´Ô∏è–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period}\n"
        )

        text += f"\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö WB API</i>"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ pnl.py
        excel_path = None
        try:
            wb = await generate_pnl_excel_report(
                shop_id,
                api_token,
                current_start,
                current_end,
                shop_name
            )
            if wb:
                excel_path = f"pnl_report_{shop_id}_{period_type}.xlsx"
                wb.save(excel_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á—ë—Ç–∞: {e}")
            excel_path = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Excel-—Ñ–∞–π–ª–æ–º
        if excel_path and os.path.exists(excel_path):
            await message.answer_document(
                InputFile(excel_path),
                caption=text,
            )
            os.remove(excel_path)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    # await message.delete()
    await message.edit_text(text, reply_markup=keyboard)
    # await state.finish()
    # kb.add(InlineKeyboardButton("–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", callback_data="an_1"))
    # kb.add(InlineKeyboardButton("ROS(–†–µ–Ω—Ç–∞–±–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂)", callback_data="an_2"))
    # kb.add(InlineKeyboardButton("–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", callback_data="an_3"))
    # kb.add(InlineKeyboardButton("ROI(–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π)", callback_data="an_4"))



async def anal_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω

    async with state.proxy() as data:
        if "shop" not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
        print(callback.data)
        data["an_type"] = callback.data
    type_data = int(callback.data.split("_")[1])
    # print(type_data)
    text = ""
    if type_data == 1:
        text = "–ß–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏"
        keyboard = period_keyboard(type_data)
    elif type_data == 2:
        text = "ROS (–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂)"
        keyboard = period_keyboard2(type_data)
    elif type_data == 3:
        text = "–°—Ä–æ–∫–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏"
        return await select_anal_period_callback(callback, state)

    elif type_data == 4:
        text = "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π"
        return await select_anal_period_callback(callback, state)
    else:
        return await select_anal_period_callback(callback, state)
        text = "–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"

    # print(text)
    await callback.message.delete()
    await callback.message.answer(
        f" <b>–†–∞—Å—á—ë—Ç {text}</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard,
    )

async def custom_period_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    type_data = callback.data.split("_")[-1]
    
    async with state.proxy() as data:
        data["an_type"] = f"an_{type_data}"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data=f"custom_day_{type_data}"),      # –ò–∑–º–µ–Ω–µ–Ω–æ
        InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data=f"custom_week_{type_data}"),   # –ò–∑–º–µ–Ω–µ–Ω–æ
        InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data=f"custom_month_{type_data}"),   # –ò–∑–º–µ–Ω–µ–Ω–æ
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    try:
        await callback.message.answer(
            " <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=keyboard
        )
    except MessageNotModified:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
    except Exception as e:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        print(f"Error in custom_period_callback: {e}")
        await callback.answer()

async def custom_period_size_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    parts = callback.data.split("_")
    period_size = parts[1]  # day, week, month
    type_data = parts[2]
    
    async with state.proxy() as data:
        data["period_size"] = period_size
        data["an_type"] = f"an_{type_data}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await show_calendar(callback, state, period_size)

async def show_calendar(callback: types.CallbackQuery, state: FSMContext, period_size):
    now = datetime.now()
    async with state.proxy() as data:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!

        current_month = data.get("calendar_month", now.month)
        current_year = data.get("calendar_year", now.year)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω–∏ –≤ state
        data["calendar_month"] = current_month
        data["calendar_year"] = current_year

    await show_calendar_for_month(callback, state, period_size, current_month, current_year)

async def custom_period_back_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    async with state.proxy() as data:
        an_type = data.get("an_type", "an_1")
        type_data = an_type.split("_")[1]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    await custom_period_callback(callback, state)

async def select_date_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    parts = callback.data.split("_")
    period_size = parts[2]  # day, week, month
    date_str = parts[3]     # YYYY-MM-DD
    
    selected_date = datetime.strptime(date_str, "%Y-%m-%d")
    
    async with state.proxy() as data:
        data["selected_date"] = selected_date
        data["period_size"] = period_size
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_date_confirmation(callback, state, selected_date, period_size)

async def show_date_confirmation(callback: types.CallbackQuery, state: FSMContext, selected_date, period_size):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    period_text = {"day": "–¥–µ–Ω—å", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü"}[period_size]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if period_size == "day":
        start_date = selected_date
        end_date = selected_date
        period_display = selected_date.strftime("%d.%m.%Y")
    elif period_size == "week":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏
        start_date = selected_date - timedelta(days=selected_date.isoweekday() - 1)
        end_date = start_date + timedelta(days=6)
        period_display = f"{start_date.strftime('%d.%m')}-{end_date.strftime('%d.%m.%Y')}"
    else:  # month
        start_date = selected_date.replace(day=1)
        end_date = (start_date.replace(month=start_date.month % 12 + 1, day=1) - timedelta(days=1))
        period_display = f"{start_date.strftime('%d.%m')}-{end_date.strftime('%d.%m.%Y')}"
    
    async with state.proxy() as data:
        data["custom_start_date"] = start_date
        data["custom_end_date"] = end_date
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_custom_{period_size}"),
        InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data=f"custom_{period_size}_{data['an_type'].split('_')[1]}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="custom_period_back")
    )
    
    try:
        await callback.message.edit_text(
            f"üìÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π {period_text}: <b>{period_display}</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
    except MessageNotModified:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
    except Exception as e:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        print(f"Error in show_date_confirmation: {e}")
        await callback.answer()


async def confirm_custom_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    parts = callback.data.split("_")
    period_size = parts[2]  # day, week, month
    async with state.proxy() as data:
        start_date = data["custom_start_date"]
        end_date = data["custom_end_date"]
        an_type = data["an_type"]
        report_type = data.get("report_type")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é product_analytics
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è select_anal_period_callback
    callback.data = f"anperiod_custom_{period_size}_{an_type.split('_')[1]}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data["custom_period"] = True
        data["custom_start_date"] = start_date
        data["custom_end_date"] = end_date
    print("report_type", report_type)

    shop_id = data["shop"]["id"]
    api_token = data["shop"]["api_token"]
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
    if report_type == "product_analytics":
        await product_analytics_callback(callback, state, start_date, end_date)
    else:
        await select_anal_period_callback(callback, state)    

async def calendar_navigation_callback(callback: types.CallbackQuery, state: FSMContext):
    print(f"calendar_navigation_callback triggered: {callback.data}")
    parts = callback.data.split("_")
    action = parts[0]  # prev or next
    period_size = parts[2]  # day, week, month

    data = await state.get_data()
    current_month = data.get("calendar_month", datetime.now().month)
    current_year = data.get("calendar_year", datetime.now().year)

    # ‚¨ÖÔ∏è‚û°Ô∏è –∏–∑–º–µ–Ω—è–µ–º –º–µ—Å—è—Ü
    if action == "prev":
        if current_month == 1:
            current_month = 12
            current_year -= 1
        else:
            current_month -= 1
    elif action == "next":
        if current_month == 12:
            current_month = 1
            current_year += 1
        else:
            current_month += 1

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ FSM
    await state.update_data(calendar_month=current_month, calendar_year=current_year)

    try:
        await show_calendar_for_month(callback, state, period_size, current_month, current_year)
    except MessageNotModified:
        await callback.answer()
    except Exception as e:
        print(f"Error in calendar_navigation_callback: {e}")
        await callback.answer()

async def show_calendar_for_month(callback: types.CallbackQuery, state: FSMContext, period_size, month, year):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    print(f"Show calendar for: {month}.{year}")
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    keyboard = InlineKeyboardMarkup(row_width=7)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
    month_date = datetime(year, month, 1)
    month_name = month_date.strftime("%B %Y")
    keyboard.add(InlineKeyboardButton(f"üìÖ {month_name}", callback_data="ignore"))
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(day, callback_data="ignore") for day in weekdays])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    first_day = datetime(year, month, 1)
    if month == 12:
        next_month = datetime(year + 1, 1, 1)
    else:
        next_month = datetime(year, month + 1, 1)
    days_in_month = (next_month - timedelta(days=1)).day
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    first_weekday = first_day.isoweekday()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    row = []
    for _ in range(first_weekday - 1):
        row.append(InlineKeyboardButton(" ", callback_data="ignore"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    now = datetime.now()
    for day in range(1, days_in_month + 1):
        date_str = f"{year}-{month:02d}-{day:02d}"
        callback_data = f"select_date_{period_size}_{date_str}"

        if day == now.day and month == now.month and year == now.year:
            row.append(InlineKeyboardButton(f"‚Ä¢{day}‚Ä¢", callback_data=callback_data))
        else:
            row.append(InlineKeyboardButton(str(day), callback_data=callback_data))

        if len(row) == 7:
            keyboard.row(*row)
            row = []

    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–°–¢–ê–í–®–ò–ï–°–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –¶–ò–ö–õ–ê
    if row:
        while len(row) < 7:
            row.append(InlineKeyboardButton(" ", callback_data="ignore"))
        keyboard.row(*row)

    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≥–æ–¥—É)
    nav_row = [
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_month_{period_size}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="custom_period_back"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_month_{period_size}")
    ]
    keyboard.row(*nav_row)
    
    period_text = {"day": "–¥–µ–Ω—å", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü"}[period_size]
    
    try:
        await callback.message.edit_text(
            f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ {period_text} –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å {period_text}:",
            reply_markup=keyboard
        )
    except MessageNotModified:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
    except Exception as e:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        print(f"Error in show_calendar_for_month: {e}")
        await callback.answer() 

async def ignore_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏)"""
    await callback.answer()    

def register_analytics_handlers(dp: Dispatcher):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —ç–∫—Å–µ–ª—å –æ—Ç—á—ë—Ç
    dp.register_callback_query_handler(
        start_analytics_report, 
        lambda c: c.data == "start_analytics_report", 
        state="*"
    )
    dp.register_callback_query_handler(analytics_callback, text="analytics", state="*")
    dp.register_callback_query_handler(
        profitability_estimation_callback, text="profitability_estimation", state="*"
    )
    dp.register_callback_query_handler(
        top5_products_callback, text="top5_products", state="*"
    )
    dp.register_callback_query_handler(
        what_if_simulator_callback, text="what_if_simulator", state="*"
    )
    dp.register_callback_query_handler(
        product_analytics_callback, text="product_analytics", state="*"
    )
    
    dp.register_callback_query_handler(finances_handler, text="finances", state="*")
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞
    dp.register_callback_query_handler(
        handle_articles_pagination,
        lambda c: c.data in ["prev_articles_page", "next_articles_page"],
        state=AnalyticsStates.waiting_for_article,
    )
    dp.register_callback_query_handler(
        select_article_callback,
        lambda c: c.data.startswith("select_article_"),
        state=AnalyticsStates.waiting_for_article,
    )
    dp.register_callback_query_handler(
        anal_callback, lambda c: c.data.startswith("an_"), state="*"
    )

    dp.register_callback_query_handler(
    ignore_callback, 
    lambda c: c.data == "ignore", 
    state="*"
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    dp.register_callback_query_handler(
        calendar_navigation_callback, 
        lambda c: c.data.startswith("prev_month_") or c.data.startswith("next_month_"), 
        state="*"
    )
    
    dp.register_callback_query_handler(
        custom_period_back_callback, 
        lambda c: c.data == "custom_period_back", 
        state="*"
    )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    dp.register_callback_query_handler(
        custom_period_callback, 
        lambda c: c.data.startswith("custom_period_"), 
        state="*"
    )

    dp.register_callback_query_handler(
        custom_period_size_callback, 
        lambda c: c.data.startswith("custom_") and not c.data.startswith("custom_period_"), 
        state="*"
    )
    
    dp.register_callback_query_handler(
        select_date_callback, 
        lambda c: c.data.startswith("select_date_"), 
        state="*"
    )
    
    dp.register_callback_query_handler(
        confirm_custom_callback, 
        lambda c: c.data.startswith("confirm_custom_"), 
        state="*"
    )
        
    dp.register_callback_query_handler(
        select_anal_period_callback, lambda c: c.data.startswith("anperiod_"), state="*"
    )
    # –í–≤–æ–¥ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    dp.register_message_handler(
        process_price_and_cost, state=AnalyticsStates.waiting_for_price_and_cost
    )

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    dp.register_callback_query_handler(
        back_to_analytics, text="back_to_analytics", state="*"
    )
